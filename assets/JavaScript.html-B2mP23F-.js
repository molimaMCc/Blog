import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as p}from"./app-otQn-0y1.js";const t={},e=p(`<h1 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript"><span>JavaScript</span></a></h1><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><h3 id="基本类型" tabindex="-1"><a class="header-anchor" href="#基本类型"><span>基本类型</span></a></h3><ol><li>String：任意字符串</li><li>Number：任意数字</li><li>Boolean：ture/false</li><li>undefined：undefined</li><li>null：null</li><li>symbol(ECMAS 2016新增)。 Symbol 是基本数据类型的一种，Symbol对象是 Symbol原始值的封装。</li><li>bigint：BigInt是一种数字型的数据，它可以表示任意精度格式的整数。</li></ol><p>加上对象类型，目前Javascript共八种数据类型</p><h3 id="引用类型" tabindex="-1"><a class="header-anchor" href="#引用类型"><span><strong>引用类型</strong></span></a></h3><p>Object：任意对象</p><p>Function：一种特别的对象（可以执行）内含可执行代码块</p><p>Array：一种特别的对象（数值下表，内部数据有序的）</p><h3 id="判断数据类型" tabindex="-1"><a class="header-anchor" href="#判断数据类型"><span>判断数据类型</span></a></h3><p>####typeof</p><ul><li><p><strong><code>typeof</code></strong> 操作符返回一个<code>字符串</code>，表示未经计算的操作数的类型。</p></li><li><p>可以判断undefined/数值型/字符串/布尔值/Function</p></li><li><p>不能判断：null与Object，Object与Array</p></li><li><p>代码表示</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token comment">//注意:typeof返回的是字符串</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token keyword">typeof</span> a<span class="token punctuation">,</span> <span class="token keyword">typeof</span> a<span class="token operator">===</span><span class="token string">&#39;undefined&#39;</span><span class="token punctuation">,</span>a<span class="token operator">===</span><span class="token keyword">undefined</span> <span class="token punctuation">)</span>  <span class="token comment">// undefined &#39;undefined&#39; true true</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token comment">//false</span>
  a <span class="token operator">=</span> <span class="token number">4</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token operator">===</span><span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token comment">//true</span>
  a <span class="token operator">=</span> <span class="token string">&#39;hongjilin&#39;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token operator">===</span><span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token comment">//true</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token operator">===</span><span class="token string">&#39;String&#39;</span><span class="token punctuation">)</span> <span class="token comment">//false  --&gt;注意,返回的类型为小写</span>
  a <span class="token operator">=</span> <span class="token boolean">true</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token operator">===</span><span class="token string">&#39;boolean&#39;</span><span class="token punctuation">)</span> <span class="token comment">//true</span>
  a <span class="token operator">=</span> <span class="token keyword">null</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">,</span> a<span class="token operator">===</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// &#39;object&#39;  true</span>
 <span class="token keyword">let</span> b<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> b<span class="token punctuation">,</span><span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;-------&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &#39;object&#39; &#39;object&#39;  --&gt;所以Typeof不能判断null与object</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="instanceof-判断实例方法" tabindex="-1"><a class="header-anchor" href="#instanceof-判断实例方法"><span>instanceof(判断实例方法)</span></a></h4><ul><li>判断对象的具体类型</li><li><strong>instanceof</strong> <strong>运算符</strong>用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token keyword">var</span> b1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">b2</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span>log<span class="token punctuation">]</span><span class="token punctuation">,</span>
 <span class="token comment">//可以简化成 b3:()=&gt;()=&gt; &#39;hongjilin&#39;  --&gt;高阶函数相关知识</span>
    <span class="token function-variable function">b3</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>  <span class="token keyword">return</span>   <span class="token string">&#39;hongjilin&#39;</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
 <span class="token doc-comment comment">/**使用instanceof进行对象判断*/</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b1 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">,</span> b1 <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token comment">// true  false</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b1<span class="token punctuation">.</span>b2 <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">,</span> b1<span class="token punctuation">.</span>b2 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token comment">// true true</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b1<span class="token punctuation">.</span>b3 <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">,</span> b1<span class="token punctuation">.</span>b3 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token comment">// true true</span>

  <span class="token doc-comment comment">/**使用typeof进行对象中某属性的判断*/</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> b1<span class="token punctuation">.</span>b2<span class="token punctuation">,</span> <span class="token keyword">typeof</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// &#39;object&#39; &#39;object&#39;  </span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> b1<span class="token punctuation">.</span>b3<span class="token operator">===</span><span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> b1<span class="token punctuation">.</span>b2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token comment">//true</span>

  <span class="token doc-comment comment">/**调用对象与数组中某函数示例*/</span>
  b1<span class="token punctuation">.</span>b2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">&#39;调用console.log打印hongjilin&#39;</span><span class="token punctuation">)</span>    <span class="token comment">//调用console.log打印hongjilin</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b1<span class="token punctuation">.</span><span class="token function">b3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// hongjilin</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="" tabindex="-1"><a class="header-anchor" href="#"><span>===</span></a></h4><p>具体可以看 MDN的[JavaScript中的相等性判断</p><p>可以判断: undefined, null</p><p>简而言之，在比较两件事情时，<code>双等号将执行类型转换</code>;<code> 三等号将进行相同的比较，而不进行类型转换</code> (如果类型不同, 只是总会返回 false )</p><h4 id="相关问题" tabindex="-1"><a class="header-anchor" href="#相关问题"><span>相关问题</span></a></h4><p><strong>1.undefined与null的区别?</strong></p><ul><li>undefined代表定义未赋值</li><li>nulll定义并赋值了, 只是值为null</li><li>代码实例</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token keyword">var</span> a
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment">// undefined</span>
  a <span class="token operator">=</span> <span class="token keyword">null</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.什么时候给变量赋值为null呢?</strong></p><ul><li>初始赋值, 表明将要赋值为对象,<code>可以用做约定俗成的占位符</code></li><li>结束前, 让对象成为垃圾对象(被垃圾回收器回收)</li><li>代码示例</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token comment">//起始,可以用做约定俗成的占位符</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token comment">// 初始赋值为null, 表明将要赋值为对象</span>
  <span class="token comment">//确定对象就赋值</span>
  b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;atguigu&#39;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span>
  <span class="token comment">//最后在不使用的时候,将其引用置空,就可以释放b这个对象占用的内存      ---当没有引用指向它的对象称为垃圾对象</span>
  b <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 让b指向的对象成为垃圾对象(被垃圾回收器回收)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3.严格区别变量类型与数据类型?</strong></p><ul><li><p>数据的类型</p><ul><li><p>基本类型</p></li><li><p>对象类型</p></li></ul></li><li><p>变量的类型(变量内存值的类型)</p><ul><li><p>基本类型: 保存就是基本类型的数据</p></li><li><p>引用类型: 保存的是地址值(对象类型)</p></li></ul></li></ul><p><strong>补充知识点：</strong></p><p>符串对比&gt;&lt;以及charCodeAt()方法</p><ol><li>Javascript字符串在进行大于(小于)比较时，会根据第一个不同的字符的ascii值码进行比较，当数字(number)与字符串(string)进行比较大小时，会强制的将数字(number)转换成字符串(string)然后再进行比较</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;13&#39;</span><span class="token operator">&gt;</span><span class="token string">&#39;3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">&gt;</span><span class="token string">&#39;6&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出： false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;d&#39;</span><span class="token operator">&gt;</span><span class="token string">&#39;ABDC&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 输出： true</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token operator">&gt;</span><span class="token string">&#39;ssf&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 输出 false</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token operator">&gt;</span><span class="token string">&#39;abcdef&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 输出 false</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.手动转换为ascii后相减,用正负数表示大小</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>sorter<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">a</span><span class="token operator">:</span>string<span class="token punctuation">,</span><span class="token literal-property property">b</span><span class="token operator">:</span>string</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> a<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>b<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 <span class="token comment">//1. 给p对象添加一个属性: content type: text/json</span>
 <span class="token comment">// p.content-type = &#39;text/json&#39; //不能用</span>
 p<span class="token punctuation">[</span><span class="token string">&#39;content-type&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;text/json&#39;</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token string">&#39;content-type&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

 <span class="token comment">//2. 属性名不确定</span>
 <span class="token keyword">var</span> propName <span class="token operator">=</span> <span class="token string">&#39;myAge&#39;</span>
 <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">18</span>
 <span class="token comment">// p.propName = value //不能用</span>
 p<span class="token punctuation">[</span>propName<span class="token punctuation">]</span> <span class="token operator">=</span> value
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对象的创建模式" tabindex="-1"><a class="header-anchor" href="#对象的创建模式"><span>对象的创建模式</span></a></h2><h3 id="object构造函数模式" tabindex="-1"><a class="header-anchor" href="#object构造函数模式"><span>Object构造函数模式</span></a></h3><p>方式一: Object构造函数模式</p><ul><li>套路: 先创建空Object对象, 再动态添加属性/方法</li><li>适用场景: 起始时不确定对象内部数据</li><li>问题: 语句太多</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/*一个人: name:&quot;Tom&quot;, age: 12*/</span>
<span class="token comment">// 先创建空Object对象</span>
 <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 p <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//此时内部数据是不确定的</span>
 <span class="token comment">// 再动态添加属性/方法</span>
 p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Tom&#39;</span>
 p<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">12</span>
 p<span class="token punctuation">.</span><span class="token function-variable function">setName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
 <span class="token punctuation">}</span>

 <span class="token comment">//测试</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">,</span> p<span class="token punctuation">.</span>age<span class="token punctuation">)</span>
 p<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;Bob&#39;</span><span class="token punctuation">)</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">,</span> p<span class="token punctuation">.</span>age<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> oo <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">username</span><span class="token operator">:</span><span class="token string">&#39;niuniu&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">,</span>
  <span class="token literal-property property">salary</span><span class="token operator">:</span><span class="token number">8500</span><span class="token punctuation">,</span>
    <span class="token function-variable function">sayHi</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>salary<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对象字面量模式" tabindex="-1"><a class="header-anchor" href="#对象字面量模式"><span>对象字面量模式</span></a></h3><p>方式二: 对象字面量模式</p><ul><li>套路: 使用{}创建对象, 同时指定属性/方法</li><li>适用场景: 起始时对象内部数据是确定的</li><li>问题: 如果创建多个对象, 有重复代码</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//对象字面量模式</span>
<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token punctuation">{</span>
   <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span>
   <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
   <span class="token function-variable function">setName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
 <span class="token comment">//测试</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">,</span> p<span class="token punctuation">.</span>age<span class="token punctuation">)</span>
 p<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;JACK&#39;</span><span class="token punctuation">)</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">,</span> p<span class="token punctuation">.</span>age<span class="token punctuation">)</span>

 <span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment">//如果创建多个对象代码很重复</span>
   <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span>
   <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span>
   <span class="token function-variable function">setName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="工厂模式" tabindex="-1"><a class="header-anchor" href="#工厂模式"><span>工厂模式</span></a></h3><p>方式三: 工厂模式</p><ul><li>套路: 通过工厂函数动态创建对象并返回</li><li>适用场景: 需要创建多个对象</li><li>问题: 对象没有一个具体的类型, 都是Object类型</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//返回一个对象的函数===&gt;工厂函数</span>
<span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
   <span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">,</span>
   <span class="token literal-property property">age</span><span class="token operator">:</span> age<span class="token punctuation">,</span>
   <span class="token function-variable function">setName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">return</span> obj
<span class="token punctuation">}</span>

<span class="token comment">// 创建2个人</span>
<span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span>

<span class="token comment">// p1/p2是Object类型</span>

<span class="token keyword">function</span> <span class="token function">createStudent</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
   <span class="token literal-property property">name</span><span class="token operator">:</span> name<span class="token punctuation">,</span>
   <span class="token literal-property property">price</span><span class="token operator">:</span> price
 <span class="token punctuation">}</span>
 <span class="token keyword">return</span> obj
<span class="token punctuation">}</span>
<span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token function">createStudent</span><span class="token punctuation">(</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token number">12000</span><span class="token punctuation">)</span>
<span class="token comment">// s也是Object</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义构造函数模式" tabindex="-1"><a class="header-anchor" href="#自定义构造函数模式"><span>自定义构造函数模式</span></a></h3><p>方式四: 自定义构造函数模式</p><ul><li>套路: 自定义构造函数, 通过new创建对象</li><li>适用场景: 需要创建多个类型确定的对象,与上方工厂模式有所对比</li><li>问题: 每个对象都有相同的数据, 浪费内存</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//定义类型</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
 <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
 <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">setName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>
p1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;Jack&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1 <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">Student</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
 <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price
<span class="token punctuation">}</span>
<span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span> <span class="token number">13000</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;JACK&#39;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="构造函数-原型的组合模式" tabindex="-1"><a class="header-anchor" href="#构造函数-原型的组合模式"><span>构造函数+原型的组合模式</span></a></h3><p>方式五: 构造函数+原型的组合模式-&gt;<code>最好用这个写法</code></p><ul><li><p>套路: 自定义构造函数, 属性在函数中初始化, 方法添加到原型上</p><ul><li>适用场景: 需要<code>创建多个类型确定</code>的对象</li></ul></li><li><p>放在原型上可以节省空间(只需要加载一遍方法)</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//在构造函数中只初始化一般函数</span>
<span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
 <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
 <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
<span class="token punctuation">}</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
<span class="token punctuation">}</span>

<span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;Jack&#39;</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>
<span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h2><h3 id="函数的定义和调用方式" tabindex="-1"><a class="header-anchor" href="#函数的定义和调用方式"><span>函数的定义和调用方式</span></a></h3><p><strong>函数的定义方式：</strong></p><ol><li><p>函数声明function关键字（命名函数）</p></li><li><p>匿名函数</p></li><li><p>new Function(参数1，参数2，‘函数体’)</p><p>var fn = new Function(&#39;参数1&#39;,&#39;参数2&#39;...,&#39;函数体&#39;)</p></li></ol><ul><li>Function里面的参数都必须是字符串格式</li><li>第三种方式执行效率低，也不方便书写，因此较少使用</li><li>所有函数都是Function的实例（对象）</li><li><strong>函数也属于对象</strong></li></ul><p><strong>函数的调用方式</strong>：</p><table><thead><tr><th style="text-align:center;">函数</th><th style="text-align:center;">调用方式</th></tr></thead><tbody><tr><td style="text-align:center;">普通函数</td><td style="text-align:center;">fn(); fn.call()</td></tr><tr><td style="text-align:center;">对象方法</td><td style="text-align:center;">对象.方法</td></tr><tr><td style="text-align:center;">构造函数</td><td style="text-align:center;">new Star();</td></tr><tr><td style="text-align:center;">绑定事件函数</td><td style="text-align:center;">触发事件</td></tr><tr><td style="text-align:center;">定时器函数</td><td style="text-align:center;">定时器自动按时调用</td></tr><tr><td style="text-align:center;">立即执行函数</td><td style="text-align:center;">自动调用</td></tr></tbody></table><h3 id="函数内this指向" tabindex="-1"><a class="header-anchor" href="#函数内this指向"><span>函数内this指向</span></a></h3><table><thead><tr><th style="text-align:center;">调用方式</th><th style="text-align:center;">this指向</th></tr></thead><tbody><tr><td style="text-align:center;">普通函数调用</td><td style="text-align:center;">window</td></tr><tr><td style="text-align:center;">构造函数调用</td><td style="text-align:center;">实例对象 原型对象里面的方法指向实例对象</td></tr><tr><td style="text-align:center;">对象方法调用</td><td style="text-align:center;">该方法所属对象</td></tr><tr><td style="text-align:center;">事件绑定方法</td><td style="text-align:center;">绑定事件对象</td></tr><tr><td style="text-align:center;">定时器函数</td><td style="text-align:center;">window</td></tr><tr><td style="text-align:center;">立即执行函数</td><td style="text-align:center;">window</td></tr></tbody></table><p>改变函数内部this指向：</p><h4 id="call-方法" tabindex="-1"><a class="header-anchor" href="#call-方法"><span>call()方法</span></a></h4><p>call()方法调用一个对象。简单理解为调用函数的方式，但是它可以改变函数的this 指向。主要作用可以实现继承</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">fun</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>thisArg: 在fun函数运行时指定的this值</li><li>arg:传递的参数</li></ul><h4 id="apply-方法" tabindex="-1"><a class="header-anchor" href="#apply-方法"><span>apply()方法</span></a></h4><p>apply() 方法调用一个函数。简单理解为调用函数的方法，但是它可以改变函数的 this 指向，参数必须用数组传递</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">fun</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> <span class="token punctuation">[</span>argsArray<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>argsArray: 传递的值，必须包含在数组里面</li><li>返回就是函数的返回值，因为他就是调用函数</li></ul><h4 id="bind-方法" tabindex="-1"><a class="header-anchor" href="#bind-方法"><span>bind()方法</span></a></h4><p>bind() 方法不会调用函数，但是能改变函数内部this指向</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">fun</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>thisArg: 在fun函数运行时指定的this值</li><li>arg1, arg2: 传递的其他参数</li><li>返回的是原函数改变this之后产生的新函数</li></ul><h4 id="call-apply-bind-总结" tabindex="-1"><a class="header-anchor" href="#call-apply-bind-总结"><span>call apply bind 总结</span></a></h4><p>相同点：</p><p>都可以改变函数内部的this指向。</p><p>区别点：</p><ol><li>call 和 apply 会调用函数，并且改变函数内部this指向</li><li>call 和 apply 传递的参数不一样，call 传递参数aru1，aru2…形式 apply 必须数组形式[arg]</li><li>bind 不会调用函数，可以改变函数内部this指向</li></ol><p>主要应用场景：</p><ol><li>call 经常做继承</li><li>apply 经常跟数组有关系，比如借助数学对象实现数组最大值最小值</li><li>bind 不调用函数，但是还想改变this指向，比如改变定时器内部的this指向</li></ol><p>##原型与原型链</p><h3 id="原型" tabindex="-1"><a class="header-anchor" href="#原型"><span>原型</span></a></h3><p><strong>函数的prototype属性</strong></p><ul><li>每个函数都有一个prototype属性, 它默认指向一个Object空对象(即称为: 原型对象)</li><li>原型对象中有一个属性constructor, 它指向函数对象</li></ul><p><strong>给原型对象添加属性(一般都是方法)</strong></p><ul><li>作用: 函数的所有实例对象自动拥有原型中的属性(方法)---共享方法</li></ul><p><strong>代码实例</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token comment">// 每个函数都有一个prototype属性, 它默认指向一个Object空对象(即称为: 原型对象)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Date</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token keyword">typeof</span> <span class="token class-name">Date</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
  <span class="token keyword">function</span> <span class="token function">Fun</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Fun</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>  <span class="token comment">// 默认指向一个Object空对象(没有我们的属性)</span>
    
  <span class="token comment">// 原型对象中有一个属性constructor, 它指向函数对象</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Date</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token operator">===</span>Date<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Fun</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token operator">===</span>Fun<span class="token punctuation">)</span>
    
  <span class="token comment">//给原型对象添加属性(一般是方法) ===&gt;实例对象可以访问</span>
  <span class="token class-name">Fun</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;test()&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
  <span class="token keyword">var</span> fun <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  fun<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>每个函数function都有一个prototype，即<code>显式</code>原型(属性)</p></li><li><p>每个实例对象都有一个[__ proto __]，可称为<code>隐式</code>原型(属性)</p></li><li><p>对象的隐式原型的值为其对应构造函数的显式原型的值</p></li><li><p>内存结构</p></li><li><p>总结</p></li></ol><ul><li>函数的[<code>prototype</code>]属性: 在定义函数时自动添加的, 默认值是一个空Object对象</li><li>对象的[__ proto __]属性: 创建对象时自动添加的, 默认值为构造函数的prototype属性值</li><li>程序员能直接操作显式原型, 但不能直接操作隐式原型(ES6之前)</li></ul><ol start="6"><li><p>代码示例:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token comment">//定义构造函数</span>
  <span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 内部默认执行语句: this.prototype = {}</span>
    <span class="token punctuation">}</span>
  <span class="token comment">// 1. 每个函数function都有一个prototype，即显式原型属性, 默认指向一个空的Object对象</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
  <span class="token comment">// 2. 每个实例对象都有一个__proto__，可称为隐式原型</span>
  <span class="token comment">//创建实例对象</span>
  <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 内部默认执行语句: this.__proto__ = Fn.prototype</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span>
  <span class="token comment">// 3. 对象的隐式原型的值为其对应构造函数的显式原型的值</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype<span class="token operator">===</span>fn<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// true</span>
  <span class="token comment">//给原型添加方法</span>
  <span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;test()&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//通过实例调用原型的方法</span>
  fn<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="原型链" tabindex="-1"><a class="header-anchor" href="#原型链"><span>原型链</span></a></h3><ul><li>访问一个对象的属性时，先在自身属性中查找，找到返回,如果没有, 再沿着[__ proto __]这条链向上查找, 找到返回,如果最终没找到, 返回undefined</li></ul><ul><li>作用: 查找对象的属性(方法)</li></ul><p><strong>属性问题</strong></p><ul><li><p>读取对象的属性值时: 会自动到原型链中查找</p></li><li><p>设置对象的属性值时: 不会查找原型链, 如果当前对象中没有此属性, 直接添加此属性并设置其值</p></li><li><p>方法一般定义在原型中, 属性一般通过构造函数定义在对象本身上</p></li><li><p>代码示例:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
  <span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">&#39;xxx&#39;</span>
  <span class="token keyword">var</span> fn1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn1<span class="token punctuation">.</span>a<span class="token punctuation">,</span> fn1<span class="token punctuation">)</span> <span class="token comment">//xxx Fn{}</span>

  <span class="token keyword">var</span> fn2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  fn2<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">&#39;yyy&#39;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn1<span class="token punctuation">.</span>a<span class="token punctuation">,</span> fn2<span class="token punctuation">.</span>a<span class="token punctuation">,</span> fn2<span class="token punctuation">)</span> <span class="token comment">//xxx yyy  Fn{a: &quot;yyy&quot;}</span>

  <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
  <span class="token punctuation">}</span>
  <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token punctuation">}</span>
  <span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>
  p1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;Bob&#39;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span>  <span class="token comment">//Person {name: &quot;Bob&quot;, age: 12}</span>

  <span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;Jack&#39;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>
  p2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;Cat&#39;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span> <span class="token comment">//Person {name: &quot;Cat&quot;, age: 12}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>__proto__<span class="token operator">===</span>p2<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span> <span class="token comment">// true   --&gt;所以方法一般定义在原型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>####<strong>instanceof详解</strong></p><ol><li>instanceof是如何判断的?</li></ol><ul><li>表达式: A instanceof B</li><li>如果B函数的显式原型对象在A对象的原型链上, 返回true, 否则返回false</li></ul><ol><li>Function是通过new自己产生的实例</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token comment">/*
 案例1
  */</span>
 <span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>
 <span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1 <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token comment">// true</span>

 <span class="token comment">/*
 案例2
  */</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Function <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Function <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token comment">// true</span>

 <span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object <span class="token keyword">instanceof</span>  <span class="token class-name">Foo</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="变量提升与函数提升" tabindex="-1"><a class="header-anchor" href="#变量提升与函数提升"><span>变量提升与函数提升</span></a></h3><ol><li>变量声明提升</li></ol><ul><li>通过var定义(声明)的变量, 在定义语句之前就可以访问到</li><li>值: undefined</li></ul><ol start="2"><li>函数声明提升</li></ol><ul><li>通过function声明的函数, 在之前就可以直接调用</li><li>值: 函数定义(对象)</li></ul><ol start="3"><li><p>引出一个问题: 变量提升和函数提升是如何产生的?</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/*
 面试题 : 输出 undefined
  */</span>
 <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span>
 <span class="token keyword">function</span> <span class="token function">fn</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
   <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">4</span> <span class="token comment">//变量提升</span>
 <span class="token punctuation">}</span>
 <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//undefined</span>
<span class="token string">&#39;--------------------------------------------&#39;</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">//undefined  变量提升</span>
 <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//可调用  函数提升</span>
 <span class="token comment">// fn3() //不能  变量提升</span>
 <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">3</span>
 <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fn2()&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
 <span class="token keyword">var</span> <span class="token function-variable function">fn3</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fn3()&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h4 id="执行上下文" tabindex="-1"><a class="header-anchor" href="#执行上下文"><span>执行上下文</span></a></h4><ol><li>代码分类(位置)</li></ol><ul><li>全局代码</li><li>函数(局部)代码</li></ul><ol start="2"><li>全局执行上下文</li></ol><ul><li>在执行全局代码前将window确定为全局执行上下文</li><li>对全局数据进行预处理 <ul><li>var定义的全局变量=&gt;undefined, 添加为window的属性</li><li>function声明的全局函数=&gt;赋值(fun), 添加为window的方法</li><li>this=&gt;赋值(window)</li></ul></li><li>开始执行全局代码</li></ul><ol><li>函数执行上下文</li></ol><ul><li>在调用函数, 准备执行函数体之前, 创建对应的函数执行上下文对象(虚拟的, 存在于栈中)</li><li>对局部数据进行预处理 <ul><li>形参变量&gt;赋值(实参)&gt;添加为执行上下文的属性</li><li><code>arguments</code>=&gt;赋值(实参列表), 添加为执行上下文的属性 =&gt;var定义的局部变量undefined, 添加为执行上下文的属性</li><li>function声明的函数 =&gt;赋值(fun), 添加为执行上下文的方法</li><li>this=&gt;赋值(调用函数的对象)</li></ul></li><li>开始执行函数体代码</li></ul><h4 id="执行上下文栈" tabindex="-1"><a class="header-anchor" href="#执行上下文栈"><span>执行上下文栈</span></a></h4><ol><li><p>在全局代码执行前, JS引擎就会创建一个栈来存储管理所有的执行上下文对象</p></li><li><p>在全局执行上下文(window)确定后, 将其添加到栈中(压栈)-&gt;所以栈底百分百是[window]</p></li><li><p>在函数执行上下文创建后, 将其添加到栈中(压栈)</p></li><li><p>在当前函数执行完后,将栈顶的对象移除(出栈)</p></li><li><p>当所有的代码执行完后, 栈中只剩下window</p></li><li><p><code>上下文栈数==函数调用数+</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//1. 进入全局执行上下文</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span>
<span class="token keyword">var</span> <span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">5</span>
  <span class="token function">foo</span><span class="token punctuation">(</span>x <span class="token operator">+</span> b<span class="token punctuation">)</span>   <span class="token comment">//3. 进入foo执行上下文           </span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">5</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> c <span class="token operator">+</span> y<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">//2. 进入bar函数执行上</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h4 id="相关面试题" tabindex="-1"><a class="header-anchor" href="#相关面试题"><span>相关面试题</span></a></h4><p><strong>1.函数提升优先级高于变量提升,且不会被变量声明覆盖,但是会被变量赋值覆盖</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/*
测试题1:  先执行变量提升, 再执行函数提升

*/</span>
<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> a
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span> <span class="token comment">// &#39;function&#39;</span>


<span class="token comment">/*
测试题2:
*/</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>b <span class="token keyword">in</span> window<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// undefined</span>

<span class="token comment">/*
测试题3:
*/</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
 <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">3</span> <span class="token comment">//与此行无关</span>
<span class="token punctuation">}</span>
<span class="token function">c</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 报错  c is not a function</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="作用域与作用域链" tabindex="-1"><a class="header-anchor" href="#作用域与作用域链"><span>作用域与作用域链</span></a></h3><h4 id="作用域" tabindex="-1"><a class="header-anchor" href="#作用域"><span>作用域</span></a></h4><ol><li>理解</li></ol><ul><li>就是一块&quot;地盘&quot;, 一个代码段所在的区域</li><li>它是静态的(相对于上下文对象), 在编写代码时就确定了</li></ul><ol><li>分类</li></ol><ul><li>全局作用域</li><li>函数作用域</li><li>没有块作用域(ES6有了) --&gt;(java语言也有)</li></ul><ol><li>作用爱国</li></ol><ul><li>隔离变量，不同作用域下同名变量不会有冲突</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/*  //没块作用域
 if(true) { var c = 3 }
 console.log(c)
 */</span>
 <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>
   b <span class="token operator">=</span> <span class="token number">20</span>
 <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fn()&#39;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token comment">//100 20 300 10</span>
   <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">400</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bar()&#39;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> x<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
   <span class="token function">bar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment">//1000 20 300 400 100</span>
   <span class="token function">bar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token comment">//1000 20 300 400 200</span>
 <span class="token punctuation">}</span>
 <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="作用域与执行上下文的区别与联系" tabindex="-1"><a class="header-anchor" href="#作用域与执行上下文的区别与联系"><span>作用域与执行上下文的区别与联系</span></a></h4><ol><li>区别1:</li></ol><ul><li>全局作用域之外，每个函数都会创建自己的作用域，<code>作用域在函数定义时就已经确定了。而不是在函数调用时</code></li><li>全局执行上下文环境是在全局作用域确定之后, js代码马上执行之前创建</li><li>函数执行上下文是在调用函数时, 函数体代码执行之前创建</li></ul><ol start="2"><li>区别2:</li></ol><ul><li>作用域是静态的, 只要函数定义好了就一直存在, 且不会再变化</li><li>执行上下文是动态的, 调用函数时创建, 函数调用结束时就会自动释放</li></ul><ol start="3"><li>联系:</li></ol><ul><li><p>执行上下文(对象)是从属于所在的作用域</p></li><li><p>全局上下文环境==&gt;全局作用域</p></li><li><p>函数上下文环境==&gt;对应的函数使用域</p></li></ul><h4 id="作用域链" tabindex="-1"><a class="header-anchor" href="#作用域链"><span>作用域链</span></a></h4><ol><li>理解</li></ol><ul><li>多个上下级关系的作用域形成的链, 它的方向是从下向上的(从内到外)</li><li>查找变量时就是沿着作用域链来查找的</li></ul><ol start="2"><li>查找一个变量的查找规则</li></ol><ul><li>在当前作用域下的执行上下文中查找对应的属性, 如果有直接返回, 否则进入2</li><li>在上一级作用域的执行上下文中查找对应的属性, 如果有直接返回, 否则进入3</li><li>再次执行2的相同操作, 直到全局作用域, 如果还找不到就抛出找不到的异常</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>
 <span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span>
   <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">3</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
   <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
 <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="相关面试题-1" tabindex="-1"><a class="header-anchor" href="#相关面试题-1"><span>相关面试题</span></a></h4><p><strong>1.作用域在函数定义时就已经确定了。而不是在函数调用时</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
 <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
 <span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
   <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 <span class="token function">show</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.对象变量不能产生局部作用域</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">//对象变量不能产生局部作用域,所以会找到全局去,导致报错</span>
 <span class="token function-variable function">fn2</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fn2<span class="token punctuation">)</span>
  <span class="token comment">//console.log(this.fn2)</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
obj<span class="token punctuation">.</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包"><span>闭包</span></a></h2><ul><li>变量作用域 <ul><li>变量根据作用域的不同分为两种：全局变量和局部变量。</li></ul></li></ul><ol><li>函数内部可以使用全局变量。</li><li>函数外部不可以使用局部变量。</li><li>当函数执行完毕，本作用域内的局部变量会销毁</li></ol><ul><li><p>什么是闭包</p><ul><li><strong>闭包(closure) 指有权访问另一个函数作用域中变量的函数</strong>。</li><li>简单理解就是，一个作用域可以访问另外一个函数内部的局部变量</li></ul></li><li><p><strong>闭包的作用</strong></p><ul><li>让函数外部可以操作(读写)到函数内部的数据(变量/函数)</li><li>闭包的主要作用：<strong>延伸了变量的作用范围</strong></li></ul></li><li><p>相关问题</p><p>(1)函数执行完后, 函数内部声明的局部变量是否还存在?</p><pre><code>  一般是不存在, 存在于闭包中的变量才可能存在.
	
	(2)在函数外部能直接访问函数内部的局部变量吗?
	
	不能, 但我们可以通过闭包让外部操作它.
</code></pre></li></ul><h3 id="错误场景" tabindex="-1"><a class="header-anchor" href="#错误场景"><span>错误场景</span></a></h3><p>需求: 点击某个按钮, 提示点击的是第n个按钮</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>测试<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>测试<span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>测试<span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>
<span class="token literal-property property">需求</span><span class="token operator">:</span> 点击某个按钮<span class="token punctuation">,</span> 提示<span class="token string">&quot;点击的是第n个按钮&quot;</span>
<span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;text/javascript&quot;</span><span class="token operator">&gt;</span>
 <span class="token keyword">var</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span>
 <span class="token comment">//注意[btns]不是一个数组,它是一个伪数组</span>
 <span class="token comment">//每次获取[btns.length]其实都是需要进行计算的(因为它是伪数组)</span>
 <span class="token comment">//所以为了性能更好,在此处赋值,就只需要计算一次</span>
 <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>length<span class="token operator">=</span>btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">var</span> btn <span class="token operator">=</span> btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
   btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//遍历加监听</span>
     <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;第&#39;</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&#39;个&#39;</span><span class="token punctuation">)</span>     <span class="token comment">//结果 全是[4]</span>
   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此处错误是,直接修改并使用全局变量[i],导致for循环结束后,所有点击按钮绑定的弹窗值都是[i+1]</p><p>随后调用时,都会找到[i]这个变量,但是此时i==3,所以所有结果都是4</p><p><strong>将变量挂载到自身来解决</strong></p><p>解决方式:将btn所对应的下标保存在btn上</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>测试<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>测试<span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>测试<span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>
<span class="token literal-property property">需求</span><span class="token operator">:</span> 点击某个按钮<span class="token punctuation">,</span> 提示<span class="token string">&quot;点击的是第n个按钮&quot;</span>
<span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;text/javascript&quot;</span><span class="token operator">&gt;</span>
 <span class="token keyword">var</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span>
 <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>length<span class="token operator">=</span>btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">var</span> btn <span class="token operator">=</span> btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
   <span class="token comment">//将btn所对应的下标保存在btn上</span>
   btn<span class="token punctuation">.</span>index <span class="token operator">=</span> i
   btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//遍历加监听</span>
     <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;第&#39;</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&#39;个&#39;</span><span class="token punctuation">)</span>     <span class="token comment">//结果 全是[4]</span>
   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将其放在自己的身上,需要时自己找自己拿,这样就能解决</p><h3 id="利用闭包" tabindex="-1"><a class="header-anchor" href="#利用闭包"><span><strong>利用闭包</strong></span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>测试<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>测试<span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>测试<span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;text/javascript&quot;</span><span class="token operator">&gt;</span>
 <span class="token comment">//利用闭包</span>
 <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>length<span class="token operator">=</span>btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//此处的j是局部的,它将传入的[i]存入局部的[j]中,这样就能实现效果 </span>
   <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">j</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">var</span> btn <span class="token operator">=</span> btns<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
     btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;第&#39;</span><span class="token operator">+</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">&#39;个&#39;</span><span class="token punctuation">)</span>
     <span class="token punctuation">}</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>  
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="常见的闭包" tabindex="-1"><a class="header-anchor" href="#常见的闭包"><span>常见的闭包</span></a></h4><p><strong>1. 将函数作为另一个函数的返回值</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 1. 将函数作为另一个函数的返回值</span>
 <span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span>
   <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     a<span class="token operator">++</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">return</span> fn2
 <span class="token punctuation">}</span>
 <span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>
 <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.将函数作为实参传递给另一个函数调用</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 2. 将函数作为实参传递给另一个函数调用</span>
 <span class="token keyword">function</span> <span class="token function">showDelay</span><span class="token punctuation">(</span><span class="token parameter">msg<span class="token punctuation">,</span> time</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token function">alert</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
 <span class="token function">showDelay</span><span class="token punctuation">(</span><span class="token string">&#39;atguigu&#39;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3.高阶函数与柯里化</strong></p><p>有时候闭包在你甚至没有注意到它的时候就会出现，你可能已经看到了我们称为部分应用程序的示例</p><p><strong>(1)从 ES6 高阶箭头函数理解函数柯里化(运用到闭包)</strong></p><p>例子：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token parameter">a</span> <span class="token operator">=&gt;</span> <span class="token parameter">b</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上是一个很简单的相加函数，把它转化成 ES5 的写法如下</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">+</span> b
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> add3 <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//add3表示一个指向函数的变量 可以当成函数调用名来用</span>
<span class="token function">add3</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再简化一下，可以写成如下形式</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> param <span class="token operator">=</span> a<span class="token punctuation">;</span>
  <span class="token keyword">var</span> <span class="token function-variable function">innerFun</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> param <span class="token operator">+</span> b<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> innerFun<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然好像没什么意义，但是很显然上述使用了[闭包]，而且该函数的返回值是一个函数。其实，这就是高阶函数的定义：以函数为参数或者返回值是函数的函数。</p><p><strong>(2) 柯里化</strong></p><p>关键就是<code>理解柯里化</code>，其实可以把它理解成，柯里化后，将第一个参数变量存在函数里面了(闭包)，然后本来需要n个参数的函数可以变成只需要剩下的（n - 1个）参数就可以调用，比如</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token parameter">y</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> y
<span class="token keyword">let</span> add2 <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token operator">-</span><span class="token operator">*</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
本来完成 add 这个操作，应该是这样调用
<span class="token keyword">let</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> y
<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
<span class="token number">1.</span> 而现在 add2 函数完成同样操作只需要一个参数，这在函数式编程中广泛应用。
<span class="token keyword">let</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token parameter">y</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> y
<span class="token keyword">let</span> add2 <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token number">2.</span>详细解释一下，就是 add2 函数 等价于 有了 x 这个闭包变量的 <span class="token parameter">y</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> y 函数<span class="token punctuation">,</span>并且此时 x <span class="token operator">=</span> <span class="token number">2</span>，所以此时调用
<span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>(3)总结</strong></p><ol><li>如果是a &gt; b &gt; c &gt; {xxx}这种多次柯里化的,如何理解?</li></ol><p>理解:前n - 1次调用，其实是提前将参数传递进去，并没有调用最内层函数体，最后一次调用才会调用最内层函数体，并返回最内层函数体的返回值</p><ol start="2"><li><p>结合上文可知，这里的多个连续箭头（无论俩个箭头函数三个及以上）函数连在一起 就是在柯里化。所以连续箭头函数就是多次柯里化函数的 es6 写法。</p></li><li><p>调用特点</p></li></ol><p>比如对于上面的 test 函数，它有 3 个箭头， 这个函数要被调用 3 次 test(a)(b)(c)，前两次调用只是在传递参数，只有最后依次调用才会返回 {xxx} 代码段的返回值，并且在 {xxx} 代码段中可以调用 a,b,</p><h4 id="闭包的生命周期" tabindex="-1"><a class="header-anchor" href="#闭包的生命周期"><span>闭包的生命周期</span></a></h4><ol><li>产生: 在嵌套内部函数定义执行完时就产生了(不是在调用)</li><li>死亡: 在嵌套的内部函数成为垃圾对象时</li></ol><ul><li><p>即没有人指向它时死亡,通常置为null,当然指向其他也行,但不安全(容易污染变量)</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//闭包的生命周期</span>
<span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">//此时闭包就已经产生了(函数提升,实际上[fn2]提升到了第一行, 内部函数对象已经创建了)</span>
   <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span>
   <span class="token keyword">function</span> <span class="token function">fn2</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//如果时[let fn2=function(){}],那么在这行才会产生闭包</span>
     a<span class="token operator">++</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">return</span> fn2
 <span class="token punctuation">}</span>
 <span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>
 <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 4</span>
 f <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">//闭包死亡(包含闭包的函数对象成为垃圾对象)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="闭包的应用" tabindex="-1"><a class="header-anchor" href="#闭包的应用"><span>闭包的应用</span></a></h4><p>闭包的应用 : 定义JS模块</p><ul><li><p>具有特定功能的js文件</p></li><li><p>将所有的数据和功能都封装在一个函数内部(私有的)</p></li><li><p>只向外暴露一个包信n个方法的对象或函数</p></li><li><p>模块的使用者, 只需要通过模块暴露的对象调用方法来实现对应的功能</p><p>模块定义:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//myModule.js</span>
<span class="token keyword">function</span> <span class="token function">myModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//私有数据</span>
  <span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token string">&#39;My atguigu&#39;</span>
  <span class="token comment">//操作数据的函数</span>
  <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;doSomething() &#39;</span><span class="token operator">+</span>msg<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">doOtherthing</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;doOtherthing() &#39;</span><span class="token operator">+</span>msg<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
                            
  <span class="token comment">//向外暴露对象(给外部使用的方法)</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">doSomething</span><span class="token operator">:</span> doSomething<span class="token punctuation">,</span>
    <span class="token literal-property property">doOtherthing</span><span class="token operator">:</span> doOtherthing
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
                            
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token comment">// myModule2.js   </span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//私有数据</span>
  <span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token string">&#39;My atguigu&#39;</span>
  <span class="token comment">//操作数据的函数</span>
  <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;doSomething() &#39;</span><span class="token operator">+</span>msg<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">doOtherthing</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;doOtherthing() &#39;</span><span class="token operator">+</span>msg<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
                            
  <span class="token comment">//向外暴露对象(给外部使用的方法)</span>
  window<span class="token punctuation">.</span>myModule2 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">doSomething</span><span class="token operator">:</span> doSomething<span class="token punctuation">,</span>
    <span class="token literal-property property">doOtherthing</span><span class="token operator">:</span> doOtherthing
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    
                                
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>模块调用:</p><p>​</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//调用示例</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>  模块调用<span class="token number">1</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;text/javascript&quot;</span> src<span class="token operator">=</span><span class="token string">&quot;myModule.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;text/javascript&quot;</span><span class="token operator">&gt;</span>
  <span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token function">myModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  module<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  module<span class="token punctuation">.</span><span class="token function">doOtherthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>  模块调用<span class="token number">2</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;text/javascript&quot;</span> src<span class="token operator">=</span><span class="token string">&quot;myModule2.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;text/javascript&quot;</span><span class="token operator">&gt;</span>
  myModule2<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  myModule2<span class="token punctuation">.</span><span class="token function">doOtherthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="闭包的缺点及解决" tabindex="-1"><a class="header-anchor" href="#闭包的缺点及解决"><span><strong>闭包的缺点及解决</strong></span></a></h4><ol><li>缺点:</li></ol><ul><li>函数执行完后, 函数内的局部变量没有释放, 占用内存时间会变长</li><li>容易造成内存泄露</li></ul><ol start="2"><li>解决:</li></ol><ul><li>能不用闭包就不用</li></ul><h4 id="内存溢出与内存泄露" tabindex="-1"><a class="header-anchor" href="#内存溢出与内存泄露"><span>内存溢出与内存泄露</span></a></h4><ol><li>内存溢出</li></ol><ul><li>一种程序运行出现的错误</li><li>当程序运行需要的内存超过了剩余的内存时, 就出抛出内存溢出的错误</li></ul><ol start="2"><li>内存泄露</li></ol><ul><li>占用的内存没有及时释放</li><li>内存泄露积累多了就容易导致内存溢出</li><li>常见的内存泄露: <ul><li>意外的全局变量</li><li>没有及时清理的计时器或回调函数</li><li>闭包</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;text/javascript&quot;</span><span class="token operator">&gt;</span>
 <span class="token comment">// 1. 内存溢出</span>
 <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-----&#39;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span>

 <span class="token comment">// 2. 内存泄露</span>
   <span class="token comment">// 意外的全局变量</span>
 <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span>  <span class="token comment">//不使用var let const去承接</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
 <span class="token punctuation">}</span>
 <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// 没有及时清理的计时器或回调函数</span>
 <span class="token keyword">var</span> intervalId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//启动循环定时器后不清理</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;----&#39;</span><span class="token punctuation">)</span>
 <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>

 <span class="token comment">// clearInterval(intervalId)</span>

   <span class="token comment">// 闭包</span>
 <span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">4</span>
   <span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>a<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">return</span> fn2
 <span class="token punctuation">}</span>
 <span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
 <span class="token comment">// f = null</span>

<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不使用let const var等去声明,实际上是挂载到window上的,所以导致内存泄露</p><h5 id="相关面试题-2" tabindex="-1"><a class="header-anchor" href="#相关面试题-2"><span>相关面试题</span></a></h5><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//代码片段一  --&gt;没有产生闭包:因为内部函数没有调用外部变量</span>
<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;The Window&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>
 <span class="token literal-property property">name</span> <span class="token operator">:</span> <span class="token string">&quot;My Object&quot;</span><span class="token punctuation">,</span>
 <span class="token function-variable function">getNameFunc</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getNameFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//?  the window</span>
<span class="token comment">//函数体的this是window</span>

<span class="token comment">//代码片段二</span>
<span class="token keyword">var</span> name2 <span class="token operator">=</span> <span class="token string">&quot;The Window&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> object2 <span class="token operator">=</span> <span class="token punctuation">{</span>
 <span class="token literal-property property">name2</span> <span class="token operator">:</span> <span class="token string">&quot;My Object&quot;</span><span class="token punctuation">,</span>
 <span class="token function-variable function">getNameFunc</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token comment">//此处的this指向是[getNameFunc],他是对象中的属性,所以this指向就是object</span>
   <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token comment">//此处用的是保存的  that</span>
     <span class="token keyword">return</span> that<span class="token punctuation">.</span>name2<span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>object2<span class="token punctuation">.</span><span class="token function">getNameFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//?  my object</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>代码片段一:</li></ol><ul><li>函数体的<code>this</code>指向是[<code>window</code>]</li><li>没有产生闭包:因为内部函数没有调用外部变量</li></ul><ol start="2"><li>代码片段二为何指向是对象?</li></ol><ul><li>this指向是调用它的[getNameFunc],他是对象中的属性,所以this指向就是object</li><li>产生了闭包</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span>o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>
 <span class="token keyword">return</span> <span class="token punctuation">{</span>
   <span class="token function-variable function">fun</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">m</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
     <span class="token keyword">return</span> <span class="token function">fun</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//undefined</span>
a<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">//0</span>
a<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">//0	</span>
a<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment">//0</span>

<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//undefined 0 1 2</span>

<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//undefined  0</span>
c<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//1 --&gt;经过上方定义后 n固定为1</span>
c<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//1 --&gt;此处是陷阱!!!  一直没有改到n,所以一直是1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="递归" tabindex="-1"><a class="header-anchor" href="#递归"><span>递归</span></a></h4><ul><li>什么是递归？ <ul><li>如果一个函数在内部可以调用其本身，那么这个函数就是递归函数。</li><li>简单理解：函数内部自己调用自己，这个函数就是递归函数 递归函数的作用和循环效果一样</li><li>由于递归很容易发生 “栈溢出” 错误(stack overflow), 所以必须要加退出条件 return</li></ul></li></ul><p>##浅拷贝和深拷贝</p><ol><li>浅拷贝只是拷贝一层，更深层次对象级别的值拷贝引用</li><li>深拷贝拷贝多层，每一级别的数据都会拷贝。</li><li>Object.assign(target, …sources) ES6新增方法可以浅拷</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 浅拷贝</span>
<span class="token keyword">var</span> obj <span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;andy&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// k是属性名 obj[k] 属性值</span>
    o<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 深拷贝</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;andy&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 封装函数</span>
<span class="token comment">// 利用函数递归</span>
<span class="token keyword">function</span> <span class="token function">deepCopy</span> <span class="token punctuation">(</span><span class="token parameter">newobj<span class="token punctuation">,</span> oldobj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> oldobj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 判断我们的属性值属于那种数据类型 </span>
        <span class="token comment">// 获取属性值 oldobj[k];</span>
        <span class="token keyword">var</span> item <span class="token operator">=</span> oldobj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 判断这个值是否是数组 </span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
             newobj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token function">deepCopy</span><span class="token punctuation">(</span>newobj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token comment">// 判断值是否是对象</span>
            newobj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token function">deepCopy</span><span class="token punctuation">(</span>newobj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
             <span class="token comment">// 属于简单数据类型</span>
            newobj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> newobj
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>##严格模式</p><h3 id="什么是严格模式" tabindex="-1"><a class="header-anchor" href="#什么是严格模式"><span>什么是严格模式?</span></a></h3><ul><li>JavaScript除了提供正常模式外，还提供了严格模式(strict mode)。 ES5的严格模式是采用具有限制性</li><li>JavaScript变体的一种方法，即在严格的条件下运行js代码</li><li>严格模式在IE10以上版本的浏览器才会被支持，旧版本浏览器中会被忽略</li><li>严格模式对正常的 JavaScript语义做了一些更改： <ol><li>消除了 JavaScript语法的一些不合理、不严谨之处，减少了一些怪异的行为。</li><li>消除代码运行的一些不安全之处，保证代码运行的安全。</li><li>提高编译器效率，增加运行速度。</li><li>禁用了在ECMAScript 的未来版本中可能会定义的一些语法，为未来新版本的 JavaScript做好铺垫。比如一些保留字如：class,enum,export,extends,import,super 不能做变量名</li></ol></li></ul><p>###开启严格模式</p><pre><code>	严格模式可以应用到整个脚本或个别函数中。因此在使用时，我们可以将严格模式分为“为脚本开启严格模式”和“为函数开启严格模式”两种情况
</code></pre><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 1. 为脚本开启严格模式</span>
<span class="token comment">// (1) 为整个脚本文件开启严格模式，需要在所有语句之前放一个特定语句 &quot;use strict&quot;;(或&#39;use strict&#39;;).</span>
	<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
        <span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;这是严格模式。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>   
<span class="token comment">// 因为 &quot;use strict&quot; 加了引号，所以老版本的浏览器会把它当作一行字符串而忽略。</span>

<span class="token comment">// (2) 有的 script 基本是严格模式，有的 script 脚本是正常模式，这样不利于文件合并，所以可以将整个脚本文件放在立即执行的匿名函数之中，这样独立创建一个作用域而不影响其他 script脚本文件。</span>
   <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
        <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
            <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token number">2.</span> 为函数开启严格模式
要给某个函数开启严格模式，需要把 <span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>或<span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> 声明放在函数体所有语句之前。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="严格模式中的变化" tabindex="-1"><a class="header-anchor" href="#严格模式中的变化"><span>严格模式中的变化</span></a></h3><ul><li>严格模式对 JavaScript的语法和行为，都做了一些改变。</li></ul><ol><li>变量规定 (1) 在正常模式中，如果一个变量没有声明就赋值，默认是全局变量。严格模式禁止这种用法，变量都必须先用 var 命令声明，然后再使用。 (2) 严禁删除已经声明的变量。列如，delete x; 语法是错误的</li><li>严格模式下 this 指向问题 (1) 以前在全局作用域函数中的 this 指向 window 对象。 (2) 严格模式下全局作用域中函数中的this 是 undefined (3) 以前构造函数时不加new也可以调用普通函数，this指向全局对象 (4) 严格模式下，如果 构造函数不加new调用，this 会报错. (5) new 实例化的构造函数指向创建的对象实例。 (6) 定时器 this 还是指向 window (7) 事件、对象还是指向调用者</li><li>函数变化 (1) 函数不能有重名的参数。 (2) 函数必须声明在顶级，新版本的 JavaScript会引入 “块级作用域” ( ES6 中已引入)。为了与新版本接轨，不允许在非函数的代码块内声明函数。</li></ol>`,234),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","JavaScript.html.vue"]]),d=JSON.parse('{"path":"/base/JavaScript/JavaScript.html","title":"JavaScript","lang":"zh-CN","frontmatter":{"description":"JavaScript 数据类型 基本类型 String：任意字符串 Number：任意数字 Boolean：ture/false undefined：undefined null：null symbol(ECMAS 2016新增)。 Symbol 是基本数据类型的一种，Symbol对象是 Symbol原始值的封装。 bigint：BigInt是一种数字...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/Blog/base/JavaScript/JavaScript.html"}],["meta",{"property":"og:site_name","content":"取名花光钱"}],["meta",{"property":"og:title","content":"JavaScript"}],["meta",{"property":"og:description","content":"JavaScript 数据类型 基本类型 String：任意字符串 Number：任意数字 Boolean：ture/false undefined：undefined null：null symbol(ECMAS 2016新增)。 Symbol 是基本数据类型的一种，Symbol对象是 Symbol原始值的封装。 bigint：BigInt是一种数字..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"取名花光钱"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JavaScript\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"取名花光钱\\",\\"url\\":\\"https://molimamcc.github.io/Blog/\\"}]}"]]},"headers":[{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[{"level":3,"title":"基本类型","slug":"基本类型","link":"#基本类型","children":[]},{"level":3,"title":"引用类型","slug":"引用类型","link":"#引用类型","children":[]},{"level":3,"title":"判断数据类型","slug":"判断数据类型","link":"#判断数据类型","children":[]}]},{"level":2,"title":"对象的创建模式","slug":"对象的创建模式","link":"#对象的创建模式","children":[{"level":3,"title":"Object构造函数模式","slug":"object构造函数模式","link":"#object构造函数模式","children":[]},{"level":3,"title":"对象字面量模式","slug":"对象字面量模式","link":"#对象字面量模式","children":[]},{"level":3,"title":"工厂模式","slug":"工厂模式","link":"#工厂模式","children":[]},{"level":3,"title":"自定义构造函数模式","slug":"自定义构造函数模式","link":"#自定义构造函数模式","children":[]},{"level":3,"title":"构造函数+原型的组合模式","slug":"构造函数-原型的组合模式","link":"#构造函数-原型的组合模式","children":[]}]},{"level":2,"title":"函数","slug":"函数","link":"#函数","children":[{"level":3,"title":"函数的定义和调用方式","slug":"函数的定义和调用方式","link":"#函数的定义和调用方式","children":[]},{"level":3,"title":"函数内this指向","slug":"函数内this指向","link":"#函数内this指向","children":[]},{"level":3,"title":"原型","slug":"原型","link":"#原型","children":[]},{"level":3,"title":"原型链","slug":"原型链","link":"#原型链","children":[]},{"level":3,"title":"变量提升与函数提升","slug":"变量提升与函数提升","link":"#变量提升与函数提升","children":[]},{"level":3,"title":"作用域与作用域链","slug":"作用域与作用域链","link":"#作用域与作用域链","children":[]}]},{"level":2,"title":"闭包","slug":"闭包","link":"#闭包","children":[{"level":3,"title":"错误场景","slug":"错误场景","link":"#错误场景","children":[]},{"level":3,"title":"利用闭包","slug":"利用闭包","link":"#利用闭包","children":[]},{"level":3,"title":"什么是严格模式?","slug":"什么是严格模式","link":"#什么是严格模式","children":[]},{"level":3,"title":"严格模式中的变化","slug":"严格模式中的变化","link":"#严格模式中的变化","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":28.19,"words":8457},"filePathRelative":"base/JavaScript/JavaScript.md","excerpt":"\\n<h2>数据类型</h2>\\n<h3>基本类型</h3>\\n<ol>\\n<li>String：任意字符串</li>\\n<li>Number：任意数字</li>\\n<li>Boolean：ture/false</li>\\n<li>undefined：undefined</li>\\n<li>null：null</li>\\n<li>symbol(ECMAS 2016新增)。 Symbol 是基本数据类型的一种，Symbol对象是 Symbol原始值的封装。</li>\\n<li>bigint：BigInt是一种数字型的数据，它可以表示任意精度格式的整数。</li>\\n</ol>\\n<p>加上对象类型，目前Javascript共八种数据类型</p>","autoDesc":true}');export{k as comp,d as data};
