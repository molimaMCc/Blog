import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as l,c as i,a,b as n,d as t,e}from"./app-otQn-0y1.js";const c={},r=e(`<h1 id="ajax" tabindex="-1"><a class="header-anchor" href="#ajax"><span>AJAX</span></a></h1><h2 id="原生ajax基础" tabindex="-1"><a class="header-anchor" href="#原生ajax基础"><span>原生AJAX基础</span></a></h2><h3 id="什么是ajax" tabindex="-1"><a class="header-anchor" href="#什么是ajax"><span>什么是ajax？</span></a></h3><p>AJAX (异步 JavaScript 和 XML) ，指⼀种创建交互式⽹⻚应⽤的⽹⻚开发技术。</p><p>特性：</p><p><strong>⽆需重新加载整个⽹⻚的情况下，使⽹⻚实现异步更新。</strong></p><h3 id="实现的步骤" tabindex="-1"><a class="header-anchor" href="#实现的步骤"><span>实现的步骤</span></a></h3><ol><li>定义⼀个XMLHttpRequest核⼼对象xhr;</li><li>通过xhr.open⽅法给当前对象提供访问⽅式、URL等。</li><li>发送当前的请求⾄指定的URL</li><li>接收返回值并处理</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code> <span class="token comment">//1. 创建核⼼对象</span>
<span class="token keyword">var</span> xmlhttp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//2.通过核⼼对象⽅法给当前的对象提供访问⽅式和URL路径</span>
xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;jsAjax?name=liuyan&quot;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//3.发送当前的请求⾄指定的URL</span>
xmlhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//4.接收返回值并处理</span>
xmlhttp<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//xmlhttp.readyState == 4代表XMLHttpRequest对象读取服务器的响应结束</span>
    <span class="token comment">//xmlhttp.status == 200响应成功</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlhttp<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xmlhttp<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> msg <span class="token operator">=</span> xmlhttp<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>
        <span class="token keyword">var</span> Newmsg <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="xmlhttprequestopen-的属性和方法" tabindex="-1"><a class="header-anchor" href="#xmlhttprequestopen-的属性和方法"><span>XMLHttpRequestopen()的属性和方法</span></a></h3><h4 id="open" tabindex="-1"><a class="header-anchor" href="#open"><span>open()</span></a></h4><p><code>open(method, url, async, user, psw)</code></p><p>规定请求</p><ul><li>method：请求类型 GET 或 POST</li><li>url：文件位置</li><li>async：true（异步）或 false（同步）</li><li>user：可选的用户名称</li><li>psw：可选的密码</li></ul><h4 id="send" tabindex="-1"><a class="header-anchor" href="#send"><span>send()</span></a></h4><p>将请求发送到服务器，用于发送请求，get请求无需参数，post需要加参数</p><h4 id="onreadystatechange" tabindex="-1"><a class="header-anchor" href="#onreadystatechange"><span>onreadystatechange</span></a></h4><p>定义当 readyState 属性发生变化时被调用的函数</p><h4 id="readystate" tabindex="-1"><a class="header-anchor" href="#readystate"><span>readyState</span></a></h4><p>保存 XMLHttpRequest 的状态。</p><ul><li>0：请求未初始化</li><li>1：服务器连接已建立</li><li>2：请求已收到</li><li>3：正在处理请求</li><li>4：请求已完成且响应已就绪</li></ul><h4 id="status" tabindex="-1"><a class="header-anchor" href="#status"><span>status</span></a></h4><p>返回请求的状态号（http状态码）</p><ul><li>200: &quot;OK&quot;</li><li>403: &quot;Forbidden&quot;</li><li>404: &quot;Not Found&quot;</li></ul><h4 id="get与post" tabindex="-1"><a class="header-anchor" href="#get与post"><span>get与post</span></a></h4><p>GET 比 POST 更简单更快，可用于大多数情况下。不过，请在以下情况始终使用</p><p>POST：</p><ul><li>缓存文件不是选项（更新服务器上的文件或数据库）</li><li>向服务器发送大量数据（POST 无大小限制）</li><li>发送用户输入（可包含未知字符），POST 比 GET 更强大更安全</li></ul><h3 id="返回值类型" tabindex="-1"><a class="header-anchor" href="#返回值类型"><span>返回值类型</span></a></h3><p>Ajax⽀持多种返回值类型：</p><p>XML：太麻烦，解析太费劲，已经不使⽤</p><p>HTML：⽹⻚，其实质和返回⽂本⼀样，没区别，⼀般使⽤⽂本代替</p><p>Script： 直接返回脚本</p><p>Text（⽂本）：（默认返回类型）字符串类型，返回直接接收字符串</p><p>Json：返回是⼀个js对象，脚本中可以直接操作这个对象，⾮常⽅便</p><h2 id="jquery" tabindex="-1"><a class="header-anchor" href="#jquery"><span>JQuery</span></a></h2><table><thead><tr><th style="text-align:center;">请求方式</th><th>语法</th></tr></thead><tbody><tr><td style="text-align:center;">ajax请求</td><td>$.ajax([settings])</td></tr><tr><td style="text-align:center;">GET请求</td><td>$.(url,[data],[callback],[type])</td></tr><tr><td style="text-align:center;">POST请求</td><td>$.(url,[data],[callback],[type])</td></tr></tbody></table><h2 id="axios" tabindex="-1"><a class="header-anchor" href="#axios"><span>axios</span></a></h2><p>什么是axios？</p><p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中</p><p><strong>特性</strong></p>`,41),u={href:"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest",target:"_blank",rel:"noopener noreferrer"},d={href:"http://nodejs.org/api/http.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",target:"_blank",rel:"noopener noreferrer"},k=a("li",null,[a("p",null,"拦截请求和响应")],-1),m=a("li",null,[a("p",null,"转换请求数据和响应数据")],-1),x=a("li",null,[a("p",null,"取消请求")],-1),v=a("li",null,[a("p",null,"自动转换 JSON 数据")],-1),g=e(`<h3 id="axiosapi" tabindex="-1"><a class="header-anchor" href="#axiosapi"><span>axiosAPI</span></a></h3><h4 id="axios-1" tabindex="-1"><a class="header-anchor" href="#axios-1"><span>axios()</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 发送 POST 请求</span>
<span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 请求方式</span>
  <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>    <span class="token comment">// 请求地址</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
 		     <span class="token comment">// 请求数据</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="请求方法别名" tabindex="-1"><a class="header-anchor" href="#请求方法别名"><span>请求方法别名</span></a></h4><p><code>axios.request(config)</code></p><p><code>axios.get(url[, config])</code></p><p><code>axios.delete(url[, config])</code></p><p><code>axios.head(url[, config])</code></p><p><code>axios.options(url[, config])</code></p><p><code>axios.post(url[, data[, config]])</code></p><p><code>axios.put(url[, data[, config]])</code></p><p><code>axios.patch(url[, data[, config]])</code></p><h4 id="基本的使用" tabindex="-1"><a class="header-anchor" href="#基本的使用"><span>基本的使用</span></a></h4><p>axios.get(&#39;url?act=1&amp;id=2&#39;)</p><p>axios.post(&#39;url&#39;,{act:1,id:2 })</p><p>axios({&#39;url&#39;})</p><h3 id="常见请求配置" tabindex="-1"><a class="header-anchor" href="#常见请求配置"><span>常见请求配置</span></a></h3><p>url</p><p>method 请求方式</p><p>baseURL</p><p>headers 自定义请求头</p><p>data：{} post请求，前端给后端的参数</p><p>params：{} get请求，前端给后端的参数</p><p>timeout请求超时</p><p>responesType:&#39;json&#39; 后端返回的数据类型</p><h3 id="axios的二次封装" tabindex="-1"><a class="header-anchor" href="#axios的二次封装"><span>axios的二次封装</span></a></h3><p><strong>为什么要二次封装</strong></p><ul><li>每个页面有不同的axios请求，当项目上线时，需要更改请求地址，一个个更改很麻烦</li><li>检测登录的状态</li><li>总的来说方便统一管理请求</li></ul><p><strong>方法：在src中新建一个工具类utils/requst.js</strong></p><h4 id="请求拦截器里做什么" tabindex="-1"><a class="header-anchor" href="#请求拦截器里做什么"><span>请求拦截器里做什么？</span></a></h4><p>做登录的判断，如果是登录状态，会把headers中的token传递给后端</p><h4 id="响应拦截器里做什么" tabindex="-1"><a class="header-anchor" href="#响应拦截器里做什么"><span>响应拦截器里做什么？</span></a></h4><p>后端给前端传数据时</p><h4 id="api的解耦" tabindex="-1"><a class="header-anchor" href="#api的解耦"><span>api的解耦</span></a></h4><p>为什么解耦？</p><p>同一个api可能多次使用，封装起来直接调用</p><p>为了方便api的统一管理</p><p>在api文件下新建某一个js文件</p>`,38);function b(f,y){const s=o("ExternalLinkIcon");return l(),i("div",null,[r,a("ul",null,[a("li",null,[a("p",null,[n("从浏览器中创建 "),a("a",u,[n("XMLHttpRequests"),t(s)])])]),a("li",null,[a("p",null,[n("从 node.js 创建 "),a("a",d,[n("http"),t(s)]),n(" 请求")])]),a("li",null,[a("p",null,[n("支持 "),a("a",h,[n("Promise"),t(s)]),n(" API")])]),k,m,x,v]),g])}const X=p(c,[["render",b],["__file","AJAX.html.vue"]]),_=JSON.parse('{"path":"/base/HTML5/AJAX.html","title":"AJAX","lang":"zh-CN","frontmatter":{"description":"AJAX 原生AJAX基础 什么是ajax？ AJAX (异步 JavaScript 和 XML) ，指⼀种创建交互式⽹⻚应⽤的⽹⻚开发技术。 特性： ⽆需重新加载整个⽹⻚的情况下，使⽹⻚实现异步更新。 实现的步骤 定义⼀个XMLHttpRequest核⼼对象xhr; 通过xhr.open⽅法给当前对象提供访问⽅式、URL等。 发送当前的请求⾄指定的U...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/Blog/base/HTML5/AJAX.html"}],["meta",{"property":"og:site_name","content":"取名花光钱"}],["meta",{"property":"og:title","content":"AJAX"}],["meta",{"property":"og:description","content":"AJAX 原生AJAX基础 什么是ajax？ AJAX (异步 JavaScript 和 XML) ，指⼀种创建交互式⽹⻚应⽤的⽹⻚开发技术。 特性： ⽆需重新加载整个⽹⻚的情况下，使⽹⻚实现异步更新。 实现的步骤 定义⼀个XMLHttpRequest核⼼对象xhr; 通过xhr.open⽅法给当前对象提供访问⽅式、URL等。 发送当前的请求⾄指定的U..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"取名花光钱"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"AJAX\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"取名花光钱\\",\\"url\\":\\"https://molimamcc.github.io/Blog/\\"}]}"]]},"headers":[{"level":2,"title":"原生AJAX基础","slug":"原生ajax基础","link":"#原生ajax基础","children":[{"level":3,"title":"什么是ajax？","slug":"什么是ajax","link":"#什么是ajax","children":[]},{"level":3,"title":"实现的步骤","slug":"实现的步骤","link":"#实现的步骤","children":[]},{"level":3,"title":"XMLHttpRequestopen()的属性和方法","slug":"xmlhttprequestopen-的属性和方法","link":"#xmlhttprequestopen-的属性和方法","children":[]},{"level":3,"title":"返回值类型","slug":"返回值类型","link":"#返回值类型","children":[]}]},{"level":2,"title":"JQuery","slug":"jquery","link":"#jquery","children":[]},{"level":2,"title":"axios","slug":"axios","link":"#axios","children":[{"level":3,"title":"axiosAPI","slug":"axiosapi","link":"#axiosapi","children":[]},{"level":3,"title":"常见请求配置","slug":"常见请求配置","link":"#常见请求配置","children":[]},{"level":3,"title":"axios的二次封装","slug":"axios的二次封装","link":"#axios的二次封装","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.28,"words":985},"filePathRelative":"base/HTML5/AJAX.md","excerpt":"\\n<h2>原生AJAX基础</h2>\\n<h3>什么是ajax？</h3>\\n<p>AJAX (异步 JavaScript 和 XML) ，指⼀种创建交互式⽹⻚应⽤的⽹⻚开发技术。</p>\\n<p>特性：</p>\\n<p><strong>⽆需重新加载整个⽹⻚的情况下，使⽹⻚实现异步更新。</strong></p>\\n<h3>实现的步骤</h3>\\n<ol>\\n<li>定义⼀个XMLHttpRequest核⼼对象xhr;</li>\\n<li>通过xhr.open⽅法给当前对象提供访问⽅式、URL等。</li>\\n<li>发送当前的请求⾄指定的URL</li>\\n<li>接收返回值并处理</li>\\n</ol>\\n<div class=\\"language-javascript\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code> <span class=\\"token comment\\">//1. 创建核⼼对象</span>\\n<span class=\\"token keyword\\">var</span> xmlhttp <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">XMLHttpRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//2.通过核⼼对象⽅法给当前的对象提供访问⽅式和URL路径</span>\\nxmlhttp<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">open</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"GET\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token string\\">\\"jsAjax?name=liuyan\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//3.发送当前的请求⾄指定的URL</span>\\nxmlhttp<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">send</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token comment\\">//4.接收返回值并处理</span>\\nxmlhttp<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">onreadystatechange</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">//xmlhttp.readyState == 4代表XMLHttpRequest对象读取服务器的响应结束</span>\\n    <span class=\\"token comment\\">//xmlhttp.status == 200响应成功</span>\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>xmlhttp<span class=\\"token punctuation\\">.</span>readyState <span class=\\"token operator\\">==</span> <span class=\\"token number\\">4</span> <span class=\\"token operator\\">&amp;&amp;</span> xmlhttp<span class=\\"token punctuation\\">.</span>status <span class=\\"token operator\\">==</span> <span class=\\"token number\\">200</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">var</span> msg <span class=\\"token operator\\">=</span> xmlhttp<span class=\\"token punctuation\\">.</span>responseText<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">var</span> Newmsg <span class=\\"token operator\\">=</span> <span class=\\"token constant\\">JSON</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">parse</span><span class=\\"token punctuation\\">(</span>msg<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{X as comp,_ as data};
