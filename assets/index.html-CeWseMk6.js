import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as p,c as e,e as a}from"./app-otQn-0y1.js";const n={},i=a('<h1 id="网络协议" tabindex="-1"><a class="header-anchor" href="#网络协议"><span>网络协议</span></a></h1><h2 id="http协议" tabindex="-1"><a class="header-anchor" href="#http协议"><span>HTTP协议</span></a></h2><p>概述：（Hype Text Transfer Protocol）超文本传输协议，是一种web客户端与服务器之间在应用层的一种通信协议</p><p>采用请求/响应交互模型</p><h3 id="http请求报文" tabindex="-1"><a class="header-anchor" href="#http请求报文"><span>HTTP请求报文</span></a></h3><p>四部分组成：请求行、请求头部、空行、请求体</p><figure><img src="https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/http1.jpeg" alt="http1" tabindex="0" loading="lazy"><figcaption>http1</figcaption></figure><h3 id="常见头部字段" tabindex="-1"><a class="header-anchor" href="#常见头部字段"><span>常见头部字段</span></a></h3><p><code>Accept</code>：客户端可识别的响应内容类型列表</p><p><code>User-Agent</code>：产生请求的浏览器类型</p><p><code>Content-Type</code>：客户端告诉服务器实际发送数据类型</p><p><code>Accept-Language</code>：用户期望获得的自然语言的优先顺序</p><p>空行作用：隔开请求头部与请求体</p><p>只有post请求有请求体，get请求没有</p><h3 id="http响应报文" tabindex="-1"><a class="header-anchor" href="#http响应报文"><span>HTTP响应报文</span></a></h3><figure><img src="https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/http2.jpeg" alt="http2" tabindex="0" loading="lazy"><figcaption>http2</figcaption></figure><h3 id="http请求方法-共9种" tabindex="-1"><a class="header-anchor" href="#http请求方法-共9种"><span>HTTP请求方法：共9种</span></a></h3><p>常见四种：</p><p><strong><code>GET</code>:</strong> 发送请求来获得服务器上的资源，请求体不包含数据，请求数据放在协议头中</p><p><strong><code>POST</code></strong>: 向服务器提交资源，数据被包含在请求体中提交给服务器</p><p><code>PUT</code>: 向服务器提交资源，并使用提交的资源，替换掉服务器对应的资源</p><p><code>DELETE</code>: 求情服务器删除指定的资源</p><p><code>PATCH</code> :HEAD方法和GET方法一样，只不过不返回报文的主体部分。只是用来确定请求的有效性及资源的更新日期时间等</p><p><code>OPTIONS</code>：请求的指定资源都支持什么http方法。</p><h3 id="http响应状态码" tabindex="-1"><a class="header-anchor" href="#http响应状态码"><span><strong>HTTP响应状态码</strong></span></a></h3><p>用来标识响应状态</p><p>组成和分类</p><p>3个十进制数字组成，第一个数字定义状态码类型，后两个对状态细分</p><p>共五种类型：</p><p>1** ：信息，服务器收到请求，需要请求者继续执行操作（很少遇到）</p><p>2** ：成功，操作被成功接收并处理</p><p>3** ：重定向，需要进一步操作完成请求</p><p>4** ：客户端错误，请求包含语法错误或无法完成请求</p><p>5** ： 服务器错误，服务器在处理请求的过程中发生错误</p><h4 id="常见2开头" tabindex="-1"><a class="header-anchor" href="#常见2开头"><span>常见2开头：</span></a></h4><p>200 ：请求成功，201：已创建</p><h4 id="常见3开头" tabindex="-1"><a class="header-anchor" href="#常见3开头"><span>常见3开头：</span></a></h4><p>301：永久移动，请求的资源已被永久的移动到新的URL地址，返回信息包括新的URL，浏览器会自动定向到新的URL</p><p>302： 临时移动，与301类似，但资源只是暂时被移动，客户端应继续使用原始URL</p><p>304： 未修改。</p><h4 id="常见4开头" tabindex="-1"><a class="header-anchor" href="#常见4开头"><span>常见4开头：</span></a></h4><p>表示客户端请求有非法内容，导致失败</p><p>400：语义有错误；请求参数有误</p><p>401：当前请求需要用户验证</p><p>403：服务器已经理解请求，但拒绝执行</p><p>404：服务器无法根据客户端的请求找到资源</p><p>408：请求超时</p><h4 id="常见5开头" tabindex="-1"><a class="header-anchor" href="#常见5开头"><span>常见5开头：</span></a></h4><p>表示服务器未能正常处理客户端的请求而出现错误</p><p>500：服务器内部错误，无法完成请求</p><p>501：服务器不支持该请求方法，只有GET和HEAD请求方法是要求每个服务器都支持的其他请求不支持返回501</p><p>503：由于超载或系统维护，服务器暂时无法处理客户请求</p><h3 id="http的版本" tabindex="-1"><a class="header-anchor" href="#http的版本"><span>HTTP的版本</span></a></h3><h4 id="http1-0" tabindex="-1"><a class="header-anchor" href="#http1-0"><span>HTTP1.0</span></a></h4><p>HTTP1.0默认使用 <code>Connection:cloose</code>，浏览器每次请求都需要与服务器建立一个 TCP 连接，服务器处理完成后立即断开 TCP 连接（无连接也称为短连接），服务器不跟踪每个客户端也不记录过去的请求（无状态）。</p><p><strong>无连接</strong>：无连接是指限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。这种方式可以节省传输时间。</p><p><strong>无状态</strong>：HTTP协议自身不对请求和响应之间的通信状态进行保存，任何两次请求之间都没有依赖关系。（每次请求都是独立的，与前面的请求和后面的请求都没有直接联系。协议本身不保留之前一切的请求或响应报文的信息。）</p><h4 id="http1-1" tabindex="-1"><a class="header-anchor" href="#http1-1"><span>HTTP1.1</span></a></h4><p>HTTP1.1默认使用 <code>Connection:keep-alive</code>（<strong>长连接</strong>），避免了连接建立和释放的开销；通过 Content-Length 字段来判断当前请求的数据是否已经全部接受。不允许同时存在两个并行的响应。</p><p>为什么需要持久连接？</p><p>Http协议的初始版本中，每进行一次Http通信就要断开一次TCP连接。每次请求都会造成TCP连接的建立和断开，增加通信量的开销。</p><p>持久连接的特点：</p><ul><li><p>持久连接也称为Http keep-alive，只要任意一端没有明确提出断开连接，则保存TCP连接状态。</p></li><li><p>减少了TCP连接的重复建立和断开所造成的额外开销，减去了服务器端的压力。</p></li><li><p>持久连接使得多数请求以管线化方式（pipelining）成为可能。可以同时并行发送多个请求，而不需要一个接一个的等待响应了。（请求打包一次传输过去，响应打包一次传递回来），管线化的前提是在持久连接下。</p></li></ul><p><strong>Http1.1缺陷</strong></p><ol><li>高延迟，带来页面加载速度的降低。（网络延迟问题只要由于队头阻塞，导致宽带无法被充分利用）</li><li>无状态特性，带来巨大的Http头部。</li><li>明文传输，不安全。</li><li>不支持服务器推送消息。</li></ol><h4 id="http2-0" tabindex="-1"><a class="header-anchor" href="#http2-0"><span>HTTP2.0</span></a></h4><p>SPDY协议：2009年谷歌公开了SPDY协议，主要解决Http1.1效率不高的问题。</p><p>SPDY被当做HTTP2.0的基础，其主要特性（兼容老版本HTTP协议，同时可以使用SSL功能）都在HTTP2.0中得到继承。</p><p>HTTP2.0：<strong>基于SPDY</strong>，专注于性能，目标是<strong>在用户和网站直接只用一个连接</strong>。</p><p><strong>HTTP2.0新特性</strong></p><p><strong>二进制传输</strong></p><p>http2.0将请求和响应数据分割为更小的帧，并且它们采用二进制编码(http1.0基于文本格式)。多个帧之间可以乱序发送，根据帧首部的流表示可以重新组装。</p><p><strong>Header压缩</strong></p><p>Http2.0开发了专门的“HPACK”算法，大大压缩了Header信息。</p><p><strong>多路复用</strong></p><p>http2.0中引入了多路复用技术，很好的解决了浏览器限制同一个域名下的请求数量的问题。多路复用技术可以只通过一个TCP链接就可以传输所有的请求数据。</p><p><strong>服务端推送</strong></p><p>HTTP2.0在一定程度上改不了传统的“请求-应答”工作模式，服务器不再完全被动地响应请求，也可以新建“流”主动向客户端发送消息。（例如，浏览器在刚请求html的时候就提前把可能会用到的JS，CSS文件发送给客户端，减少等待延迟，这被称为“服务端推送Server Push”）</p><p>服务器也不能随便将第三方资源推送给服务器，必须经过双方确认。</p><p><strong>缺点：</strong></p><ul><li>TCP以及TCP+TLS建立连接的延迟（握手延迟）</li><li>TCP的<strong>队头阻塞</strong>没有彻底解决（http2.0中，多个请求是跑在一个TCP管道中的，一旦丢包，TCP就要等待重传（丢失的包等待重新传输确认），从而阻塞该TCP连接中的所有请求）</li></ul><h4 id="http3-0" tabindex="-1"><a class="header-anchor" href="#http3-0"><span>HTTP3.0</span></a></h4><p>Google在推行SPDY的时候意识到了上述http2.0一系列问题，于是又产生了<strong>基于UDP协议的“QUIC”协议</strong>，让HTTP跑在QUIC上而不是TCP上。从而产生了HTTP3.0版本，它<strong>解决了“队头阻塞”的问题</strong>。</p><p><strong>特点：</strong></p><ol><li><p>实现了类似TCP的流量控制，传输可靠性的功能。</p></li><li><p>实现了快速握手功能（QUIC基于UDP，UDP是面向无连接的，不需要握手和挥手，比TCP快）</p></li><li><p>集成了TLS加密功能</p></li><li><p>多路复用，彻底解决TCP中队头阻塞的问题（单个“流”是有序的，可能会因为丢包而阻塞，但是其他流不会受到影响）</p></li></ol><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h4><ul><li>HTTP1.1的缺点：安全性不足和性能不高；</li><li>HTTP2.0完全兼容HTTTP1.0，是“更安全的HTTP，更快的HTTPS”，头部压缩，多路复用等技术充分利用了带宽，降低了延迟。</li><li>HTTP3.0的底层支撑协议QUIC基于UDP实现，又含TCP的特点，实现了又快又可靠的协议。</li><li></li></ul><h2 id="tcp-udp协议" tabindex="-1"><a class="header-anchor" href="#tcp-udp协议"><span>TCP/UDP协议</span></a></h2><p>TPC和UDP都是网络层协议</p><p>TCP是基于连接的协议，类似于打电话。</p><h3 id="tcp的三次握手" tabindex="-1"><a class="header-anchor" href="#tcp的三次握手"><span>TCP的三次握手</span></a></h3><p>客户端向服务端发送连接请求FIN（第一次），服务端向客户端放送</p>',92),o=[i];function h(r,s){return p(),e("div",null,o)}const d=t(n,[["render",h],["__file","index.html.vue"]]),T=JSON.parse('{"path":"/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/","title":"网络协议","lang":"zh-CN","frontmatter":{"description":"网络协议 HTTP协议 概述：（Hype Text Transfer Protocol）超文本传输协议，是一种web客户端与服务器之间在应用层的一种通信协议 采用请求/响应交互模型 HTTP请求报文 四部分组成：请求行、请求头部、空行、请求体 http1http1 常见头部字段 Accept：客户端可识别的响应内容类型列表 User-Agent：产生请...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/Blog/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"}],["meta",{"property":"og:site_name","content":"取名花光钱"}],["meta",{"property":"og:title","content":"网络协议"}],["meta",{"property":"og:description","content":"网络协议 HTTP协议 概述：（Hype Text Transfer Protocol）超文本传输协议，是一种web客户端与服务器之间在应用层的一种通信协议 采用请求/响应交互模型 HTTP请求报文 四部分组成：请求行、请求头部、空行、请求体 http1http1 常见头部字段 Accept：客户端可识别的响应内容类型列表 User-Agent：产生请..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/http1.jpeg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"取名花光钱"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"网络协议\\",\\"image\\":[\\"https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/http1.jpeg\\",\\"https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/http2.jpeg\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"取名花光钱\\",\\"url\\":\\"https://molimamcc.github.io/Blog/\\"}]}"]]},"headers":[{"level":2,"title":"HTTP协议","slug":"http协议","link":"#http协议","children":[{"level":3,"title":"HTTP请求报文","slug":"http请求报文","link":"#http请求报文","children":[]},{"level":3,"title":"常见头部字段","slug":"常见头部字段","link":"#常见头部字段","children":[]},{"level":3,"title":"HTTP响应报文","slug":"http响应报文","link":"#http响应报文","children":[]},{"level":3,"title":"HTTP请求方法：共9种","slug":"http请求方法-共9种","link":"#http请求方法-共9种","children":[]},{"level":3,"title":"HTTP响应状态码","slug":"http响应状态码","link":"#http响应状态码","children":[]},{"level":3,"title":"HTTP的版本","slug":"http的版本","link":"#http的版本","children":[]}]},{"level":2,"title":"TCP/UDP协议","slug":"tcp-udp协议","link":"#tcp-udp协议","children":[{"level":3,"title":"TCP的三次握手","slug":"tcp的三次握手","link":"#tcp的三次握手","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":7.21,"words":2163},"filePathRelative":"网络协议/README.md","excerpt":"\\n<h2>HTTP协议</h2>\\n<p>概述：（Hype Text Transfer Protocol）超文本传输协议，是一种web客户端与服务器之间在应用层的一种通信协议</p>\\n<p>采用请求/响应交互模型</p>\\n<h3>HTTP请求报文</h3>\\n<p>四部分组成：请求行、请求头部、空行、请求体</p>\\n<figure><img src=\\"https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/http1.jpeg\\" alt=\\"http1\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>http1</figcaption></figure>","autoDesc":true}');export{d as comp,T as data};
