import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e as t}from"./app-otQn-0y1.js";const e={},p=t(`<h1 id="css布局" tabindex="-1"><a class="header-anchor" href="#css布局"><span>CSS布局</span></a></h1><h2 id="传统布局方式" tabindex="-1"><a class="header-anchor" href="#传统布局方式"><span>传统布局方式</span></a></h2><h3 id="_1-浮动布局" tabindex="-1"><a class="header-anchor" href="#_1-浮动布局"><span>1.浮动布局</span></a></h3><h4 id="_1-1浮动原理" tabindex="-1"><a class="header-anchor" href="#_1-1浮动原理"><span>1.1浮动原理</span></a></h4><p>使当前元素脱离默认文档流，相当于让元素浮动了起来。再按照代码的先后顺序依次从左至右(float:left;) /从右至左(float:right)排开，直到元素的margin遇见父级元素padding或其他浮动元素的边缘</p><h4 id="_1-2浮动的影响" tabindex="-1"><a class="header-anchor" href="#_1-2浮动的影响"><span>1.2浮动的影响</span></a></h4><p>对元素的影响：</p><p><strong>块级元素</strong>转为行内元素，宽高（不设宽高）由内容撑起，<strong>行内元素</strong>可以设置宽高</p><p>对兄弟元素的影响：</p><ul><li>会遮挡块级元素(后面兄弟节点)，但不会遮挡文本和行内元素</li><li>不遮挡上面块级元素的位置和文本</li></ul><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
    <span class="token selector">div[class^=box]</span> <span class="token punctuation">{</span>
      <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
      <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
      <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token selector">.big-box</span> <span class="token punctuation">{</span>
      <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
      <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
      <span class="token property">background</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token selector">.min-box</span> <span class="token punctuation">{</span>
      <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
      <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
      <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>big-box<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box-1<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box-2<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span> yellowgreen<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box-3<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>min-box<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/Snipaste_2022-10-09_10-14-17.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上图可知，浮动的三个盒子没有覆盖橙色盒子，覆盖了粉色盒子</p><p>对父元素的影响：</p><p><strong>高度塌陷</strong>：由于子盒子浮动，导致父元素没有内容撑开</p><p>解决方案：</p><ul><li>给父元素设置宽高（不建议，在布局中高度尽量不写死）</li><li>清除浮动</li></ul><p><strong>浮动何时停止</strong></p><ul><li>遇到父元素边框</li><li>遇到其他浮动元素</li></ul><h4 id="_1-3清除浮动方案" tabindex="-1"><a class="header-anchor" href="#_1-3清除浮动方案"><span>1.3清除浮动方案</span></a></h4><p><code>clear:both</code></p><p>**（1）**在清除浮动元素的后面添加一个div，设置属性clear:both</p><p>**（2）**父盒子添加<code>overflow：hidden</code></p><p>​ 通过触发BFC的方式清除浮动，必须定义width或者zoom:1，不能同时定义height，使用这个方法的时候，浏览器会自动检查浮动区域的高度。</p><p>缺点：不能和position配合使用，因为超出尺寸的可能会被隐藏，就没法显示溢出元素。</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">.container</span><span class="token punctuation">{</span>
	<span class="token property">border</span><span class="token punctuation">:</span> solid 2px <span class="token function">rgb</span><span class="token punctuation">(</span>247<span class="token punctuation">,</span> 168<span class="token punctuation">,</span> 168<span class="token punctuation">)</span><span class="token punctuation">;</span>
	 <span class="token property">width</span><span class="token punctuation">:</span> 700px<span class="token punctuation">;</span>
	 <span class="token property">verflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（3）</strong><code>after</code>伪元素</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">.clearfix:after</span> <span class="token punctuation">{</span>
	<span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
	<span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
	<span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（4）</strong> <code>before</code>和<code>after</code>双伪元素</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">.clearfix:before,.clearfix:after</span> <span class="token punctuation">{</span>
	<span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
	<span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
	<span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-定位布局" tabindex="-1"><a class="header-anchor" href="#_2-定位布局"><span>2.定位布局</span></a></h3><p>定位概述:定位是某元素相对于其正常位置发生偏移。</p><h4 id="_2-1框的概念" tabindex="-1"><a class="header-anchor" href="#_2-1框的概念"><span>2.1框的概念</span></a></h4><p>一切皆为”框“：div、h1 或 p 元素常常被称为块级元素。这意味着这些元素显示为<em>一块内容</em>，即“<strong>块框</strong>”。span 和 strong 等元素称为“行内元素”，这是因为它们的内容显示在行中，即“<strong>行内框</strong>”。</p><p><strong>块级元素</strong>：会生成一个块框，来包含子盒子和生成的内容。</p><p><strong>块框</strong>：同时也是一个块包含框，里面要么只包含块框，要么只包含行内框</p><p><strong>匿名块框</strong>:</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>    
 	 some text
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果一个块框（如上例中为DIV生成的框）在其中包含另外一个块框（如上例中的P），那么，我们强迫它只能包含块框。因此，上面的 “Some text” 被强制加到一个匿名的块框里面。</p><p><strong>行内元素</strong>和<strong>行内框</strong></p><p><strong>行内元素</strong>：指能排在一行的元素，允许左右有其他元素，有 a，img，b 等。</p><p><strong>行内框</strong>：一个行内元素生成一个行内框</p><p><strong>匿名行内框</strong>：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>P</span><span class="token punctuation">&gt;</span></span>Some <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EM</span><span class="token punctuation">&gt;</span></span>emphasized<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span> text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>P</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>P元素生成一个块框，其内还有几个行内框。&quot;emphasized&quot;的框是一个行内元素（<strong>em</strong>）产生的行内框，而其它的框(&quot;Some&quot;和&quot;text&quot;)是块级元素（P）产生的行内框。后者就称为匿名行内控制框，因为它们没有与之相关的行内元素，所以，这些框被叫做匿名行内框。</p><h4 id="_2-2定位机制" tabindex="-1"><a class="header-anchor" href="#_2-2定位机制"><span>2.2定位机制</span></a></h4><p>CSS 有三种基本的定位机制：普通流、浮动和绝对定位</p><p>除非专门指定，否则所有框都在普通流中定位。也就是说，普通流中的元素的位置由元素在 (X)HTML 中的位置决定,</p><p><strong>块框</strong>从上到下一个接一个地排列，框之间的<strong>垂直距离</strong>是由框的<strong>垂直外边</strong>距计算出来</p><p><strong>行内框</strong>在一行中水平布置。可以使用水平内边距、边框和外边距调整它们的间距。但是，<strong>垂直内边距</strong>、<strong>边框</strong>和<strong>外边距</strong>不影响行内框的高度。</p><p>由一行形成的水平框称为<strong>行框</strong>（Line Box），行框的高度总是足以容纳它包含的所有行内框。不过，设置行高可以增加这个框的高度。</p><p>行框与行内框的区别：</p><figure><img src="https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/2020060612134865.png" alt="2020060612134865" tabindex="0" loading="lazy"><figcaption>2020060612134865</figcaption></figure><h4 id="_2-3position属性" tabindex="-1"><a class="header-anchor" href="#_2-3position属性"><span>2.3position属性</span></a></h4><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td><code>absolute</code></td><td>生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。元素的位置通过 &quot;left&quot;, &quot;top&quot;, &quot;right&quot; 以及 &quot;bottom&quot; 属性进行规定。</td></tr><tr><td><code>fixed</code></td><td>生成绝对定位的元素，相对于浏览器窗口进行定位。元素的位置通过 &quot;left&quot;, &quot;top&quot;, &quot;right&quot; 以及 &quot;bottom&quot; 属性进行规定。</td></tr><tr><td><code>relative</code></td><td>生成相对定位的元素，相对于其正常位置进行定位。因此，&quot;left:20&quot; 会向元素的 LEFT 位置添加 20 像素。</td></tr><tr><td><code>static</code></td><td>默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。</td></tr><tr><td><code>inherit</code></td><td>规定应该从父元素继承 position 属性的值。</td></tr></tbody></table><h2 id="新式布局方式" tabindex="-1"><a class="header-anchor" href="#新式布局方式"><span>新式布局方式</span></a></h2><h3 id="_1-flex布局" tabindex="-1"><a class="header-anchor" href="#_1-flex布局"><span>1.Flex布局</span></a></h3><p>flex弹性布局</p><p>任何一种元素都能指定flex布局，行内元素也可以</p><h4 id="_1-1基本概念" tabindex="-1"><a class="header-anchor" href="#_1-1基本概念"><span>1.1基本概念</span></a></h4><p><strong>容器和项目</strong></p><p>采用flex布局的元素称为容器，在flex布局中的子元素被称为项目</p><figure><img src="https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/20200826161110660.png" alt="20200826161110660" tabindex="0" loading="lazy"><figcaption>20200826161110660</figcaption></figure><p>容器内默认两根轴:水平主轴和垂直交叉轴</p><h4 id="_1-2容器属性" tabindex="-1"><a class="header-anchor" href="#_1-2容器属性"><span>1.2容器属性</span></a></h4><ol><li>flex-direction</li><li>flex-wrap</li><li>flew-flow</li><li>justify-content</li><li>align-items</li><li>align-content</li></ol><h5 id="_1-2-1flex-direction-设置主轴的方向" tabindex="-1"><a class="header-anchor" href="#_1-2-1flex-direction-设置主轴的方向"><span>1.2.1<code>flex-direction</code>：设置主轴的方向</span></a></h5><p>属性值：</p><ul><li><code>row</code>主轴水平方向，默认</li><li><code>column</code>主轴垂直方向</li><li><code>row-reverse</code>主轴水平方向，起点在右端</li><li><code>column-reverse</code>垂直方向，起点在下</li></ul><figure><img src="https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/95ceb4ca6af6453da77a4b77a9fd5204.png" alt="95ceb4ca6af6453da77a4b77a9fd5204" tabindex="0" loading="lazy"><figcaption>95ceb4ca6af6453da77a4b77a9fd5204</figcaption></figure><h5 id="_1-2-2flex-wrap-设置换行" tabindex="-1"><a class="header-anchor" href="#_1-2-2flex-wrap-设置换行"><span>1.2.2<code>flex-wrap</code>：设置换行</span></a></h5><p>属性值：nowrap不换行，默认</p><p>wrap换行</p><h5 id="_1-2-3flex-flow-flex-direction-和-flex-wrap的简写" tabindex="-1"><a class="header-anchor" href="#_1-2-3flex-flow-flex-direction-和-flex-wrap的简写"><span>1.2.3<code>flex-flow</code>：flex-direction 和 flex-wrap的简写</span></a></h5><h5 id="_1-2-4justify-content-设置主轴的排序方式" tabindex="-1"><a class="header-anchor" href="#_1-2-4justify-content-设置主轴的排序方式"><span>1.2.4<code>justify-content</code>：设置主轴的排序方式</span></a></h5><ol><li><p><code>flex-start</code>：默认值，左对齐</p></li><li><p><code>flex-end</code>：右对齐</p></li><li><p><code>center</code>：居中</p></li><li><p><code>space-between</code>：两端对齐，项目之间的间隔都相等</p></li><li><p><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍</p><figure><img src="https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/1fc0579d0f6d4fecac618952a58c4d14.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li></ol><h5 id="_1-2-5align-items-不换行-单行-设置交叉轴的排序方式" tabindex="-1"><a class="header-anchor" href="#_1-2-5align-items-不换行-单行-设置交叉轴的排序方式"><span>1.2.5<code>align-items</code>（不换行，单行）：设置交叉轴的排序方式</span></a></h5><ol><li><code>flex-start</code>：交叉轴的起点对齐</li><li><code>flex-end</code>:交叉轴的终点对齐</li><li><code>center</code>：交叉轴的中点对齐</li><li><code>baseline</code>：项目的第一行文字的基线对齐</li><li><code>stretch</code>：默认值，如果项目未设置豪赌或者auto，将占满整个容器的高度</li></ol><figure><img src="https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/5bd9012146c44a148d75671d4e8c0f62.png" alt="5bd9012146c44a148d75671d4e8c0f62" tabindex="0" loading="lazy"><figcaption>5bd9012146c44a148d75671d4e8c0f62</figcaption></figure><h5 id="_1-2-6align-content-定义多根轴线的对齐方式-一根轴时不起作用" tabindex="-1"><a class="header-anchor" href="#_1-2-6align-content-定义多根轴线的对齐方式-一根轴时不起作用"><span>1.2.6<code>align-content</code>：定义多根轴线的对齐方式，一根轴时不起作用</span></a></h5><ol><li><code>flex-start</code>：与交叉轴的起点对齐</li><li><code>flex-end</code>：与交叉轴的终点对齐</li><li><code>center</code>：与交叉轴的中点对齐</li><li><code>space-between</code>：与检查周两端对齐，轴线之间的间隔平均分布</li><li><code>space-around</code>，没跟轴线两侧的间隔都相等。所以，轴线之间的间隔与轴线与边框的的间隔大一倍</li><li><code>strech</code>：默认值，轴线占满整个交叉轴</li></ol><figure><img src="https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/19a96b0e1bdd41c28a36ad124972ca4b.png" alt="19a96b0e1bdd41c28a36ad124972ca4b" tabindex="0" loading="lazy"><figcaption>19a96b0e1bdd41c28a36ad124972ca4b</figcaption></figure><h4 id="_1-3项目属性" tabindex="-1"><a class="header-anchor" href="#_1-3项目属性"><span>1.3项目属性</span></a></h4><p><code>order</code>：设置项目的排序方式，数值越小，排越前，默认0，可以为负数</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">.item</span><span class="token punctuation">{</span>
    <span class="token property">order</span><span class="token punctuation">:</span> 1
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>flex-grow</code>：定义项目的放大比例，默认为0，如果存在剩余空间，也不会放大</p><p><strong>如果项目所有的flex-grow属性都为1，它们将等分剩余空间(如果有的话)。如果一个项目的flex-grow属性为2，其他项目的都为1，为2的项目占据的剩余空间将比其他的项目多一倍</strong></p><p><code>flex-shrink</code>：定义项目的缩小比例，默认为1，如果空间不足，该项目将缩小，值越大越缩小</p><p><strong>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目的都为1，当空间不足时，为1的项目不缩小</strong></p><p><code>flex-basis</code>：定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间，它的默认值为auto，即项目的本来大小</p><p>它可以设为跟width或height属性一样的值（比如200px），项目将占据固定空间</p><p><code>flex</code>是flex-grow、flex-shrink和flex-basis的简写</p><p>默认为 0 1 auto</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">.item</span> <span class="token punctuation">{</span>
  	 <span class="token property">flex</span><span class="token punctuation">:</span>[flex-grow | flex-shrink | flex-basis]
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>align-self</code>：设置单个项目的对齐方式，可覆盖align-items属性，默认为auto，属性值与align-items相同</p><h3 id="_2-grid布局" tabindex="-1"><a class="header-anchor" href="#_2-grid布局"><span>2.Grid布局</span></a></h3><p>将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。</p><p>与Flex布局的对比，</p><p><code>Flex</code>布局是轴线布局，只能指定&quot;项目&quot;针对轴线的位置，可以看作是<strong>一维布局</strong>。<code>Grid</code>布局则是将容器划分成&quot;行&quot;和&quot;列&quot;，产生单元格，然后指定&quot;项目所在&quot;的单元格，可以看作是<strong>二维布局</strong></p><h4 id="_2-1基本概念" tabindex="-1"><a class="header-anchor" href="#_2-1基本概念"><span>2.1基本概念</span></a></h4><p><strong>容器与项目</strong></p><p>采用网格布局的区域称为<strong>容器</strong>。容器内部的采用网格定位的子元素（只对顶层子元素有效），称为<strong>项目</strong></p><p><strong>行和列</strong></p><p>容器的水平区域称为行，垂直区域称为列</p><figure><img src="https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/1_bg2019032502.png" alt="1_bg2019032502" tabindex="0" loading="lazy"><figcaption>1_bg2019032502</figcaption></figure><p><strong>单元格</strong></p><p>行和列的交叉区域称为单元格</p><p>正常情况下，n行m列会产生n*m个单元格</p><p><strong>网格线</strong></p><p>划分网络的线，水平网格线划分出行，垂直网格线划分出列。<code>n</code>行有<code>n + 1</code>根水平网格线，<code>m</code>列有<code>m + 1</code>根垂直网格线，比如三行就有四根水平网格线</p><figure><img src="https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/1_bg2019032503.png" alt="1_bg2019032503" tabindex="0" loading="lazy"><figcaption>1_bg2019032503</figcaption></figure><h4 id="_2-1容器定义及关键字" tabindex="-1"><a class="header-anchor" href="#_2-1容器定义及关键字"><span>2.1容器定义及关键字</span></a></h4><h5 id="display-grid" tabindex="-1"><a class="header-anchor" href="#display-grid"><span>display:grid</span></a></h5><p>指定一个容器采用网格布局。</p><p>默认情况下，容器元素都是块级元素，但也可以设成行内元素。</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">div</span><span class="token punctuation">{</span>
	<span class="token property">display</span><span class="token punctuation">:</span> inline-grid<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意，设为网格布局以后，容器子元素（项目）的float、display: inline-block、display: table-cell、vertical-align和column-等设置都将失效。</strong></p><p><code>grid-template-columns</code>，<code>grid-template-rows</code></p><p>定义<strong>列宽</strong>，定义<strong>行高</strong></p><h5 id="repeat" tabindex="-1"><a class="header-anchor" href="#repeat"><span>repeat()</span></a></h5><p>简化重复的值,接受两个参数，第一个参数是重复的次数，第二个参数是所要重复的值</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
	<span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span> 
	<span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 33.33% 33.33% 33.33%<span class="token punctuation">;</span> 
	<span class="token property">grid-template-rows</span><span class="token punctuation">:</span> 33.33% 33.33% 33.33%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">// 等于
.container</span> <span class="token punctuation">{</span>
	<span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span> 
	<span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>3<span class="token punctuation">,</span>33.3%<span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>3<span class="token punctuation">,</span>33.3%<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以重复某种模式</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>2<span class="token punctuation">,</span> 60px 70px 80px<span class="token punctuation">)</span><span class="token punctuation">;</span>
//定义了6列，第一列和第四列的宽度为60px，第二列和第五列为70px，第三列和第六列为80px
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="auto-fill" tabindex="-1"><a class="header-anchor" href="#auto-fill"><span>auto-fill</span></a></h5><p>容器不确定大小，可以使用auto-fill表示自动填充项目</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>auto-fill<span class="token punctuation">,</span> 100px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="fr" tabindex="-1"><a class="header-anchor" href="#fr"><span>fr</span></a></h5><p>如果两列的宽度分别为<code>1fr</code>和<code>2fr</code>，就表示后者是前者的<strong>两倍</strong></p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 150px 1fr 2fr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
// 第一列的宽度为150像素，第二列的宽度是第三列的一半。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="minmax" tabindex="-1"><a class="header-anchor" href="#minmax"><span>minmax()</span></a></h5><p>函数产生一个长度范围，表示长度就在这个范围之中。它接受两个参数，分别为最小值和最大值。</p><h5 id="auto" tabindex="-1"><a class="header-anchor" href="#auto"><span>auto</span></a></h5><p>关键字表示由浏览器自己决定长度</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 100px auto 100px
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第二列的宽度，基本上等于该列单元格的最大宽度，除非单元格内容设置了<code>min-width</code>，且这个值大于最大宽度</p><h5 id="网格线的名称" tabindex="-1"><a class="header-anchor" href="#网格线的名称"><span>网格线的名称</span></a></h5><p>网格线语法：</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> [c1] 100px [c2] 100px [c3] auto [c4]<span class="token punctuation">;</span>
  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> [r1] 100px [r2] 100px [r3] auto [r4]<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>网格布局允许同一根线有多个名字，比如<code>[fifth-line row-5]</code></p><h5 id="布局实例" tabindex="-1"><a class="header-anchor" href="#布局实例"><span>布局实例</span></a></h5><p>两栏布局：</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">.wrapper</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 70% 30%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3容器属性" tabindex="-1"><a class="header-anchor" href="#_2-3容器属性"><span>2.3容器属性</span></a></h4><h5 id="_1-行间距属性" tabindex="-1"><a class="header-anchor" href="#_1-行间距属性"><span>(1)行间距属性</span></a></h5><p><code>grid-row-gap</code> 属性设置行与行的间隔， <code>grid-column-gap</code> 属性设置列与列的间隔，</p><p><code>grid-gap</code> 属性是两个简写</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">grid-row-gap</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>
  <span class="token property">grid-column-gap</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
  // <span class="token property">grid-gap</span><span class="token punctuation">:</span> &lt;grid-row-gap&gt; &lt;grid-column-gap&gt;<span class="token punctuation">;</span>
  <span class="token property">grid-gap</span><span class="token punctuation">:</span> 30px 20px
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>根据最新标准</strong>，上面三个属性名的<code>grid-</code>前缀已经删除，grid-column-gap和grid-row-gap写成<code>column-gap</code>和<code>row-gap</code>，<code>grid-gap</code>写成<code>gap</code>。</p><h5 id="_2-定义区域" tabindex="-1"><a class="header-anchor" href="#_2-定义区域"><span>(2)定义区域</span></a></h5><p><code>grid-template-areas</code></p><p>网格布局允许指定&quot;区域&quot;（area），一个区域由单个或多个单元格组成</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>
  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> 100px 100px 100px<span class="token punctuation">;</span>
  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> 100px 100px 100px<span class="token punctuation">;</span>
  <span class="token property">grid-template-areas</span><span class="token punctuation">:</span> <span class="token string">&#39;a b c&#39;</span>
                       <span class="token string">&#39;d e f&#39;</span>
                       <span class="token string">&#39;g h i&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码先划分出9个单元格，然后将其定名为<code>a</code>到<code>i</code>的九个区域，分别对应这九个单元格</p><p>可以合并多个单元格</p><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token property">grid-template-areas</span><span class="token punctuation">:</span> <span class="token string">&#39;a a a&#39;</span>
                     <span class="token string">&#39;b b b&#39;</span>
                     <span class="token string">&#39;c c c&#39;</span><span class="token punctuation">;</span>
三块区域 a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果某些区域不需要利用，则使用&quot;点&quot;（<code>.</code>）表示</p><hr><h2 id="移动端布局" tabindex="-1"><a class="header-anchor" href="#移动端布局"><span>移动端布局</span></a></h2><h3 id="_1-rem" tabindex="-1"><a class="header-anchor" href="#_1-rem"><span>1.rem</span></a></h3><p><code>rem</code>是一个相对单位，类似于em，em是相对于父元素字体大小，rem是相对于html标签的字体大小</p><p>rem的优势：父元素文字大小可能不一致， 但是整个页面只有一个html，可以很好来控制整个页面的元素大小</p><h3 id="_2-媒体查询-media-query" tabindex="-1"><a class="header-anchor" href="#_2-媒体查询-media-query"><span>2.媒体查询(Media Query)</span></a></h3><p>也叫响应式</p><p><strong>特点</strong>：</p><ol><li>使用 @media 查询，可以针对不同的媒体类型定义不同的样式</li><li>@media 可以针对不同的屏幕尺寸设置不同的样式</li><li>当你重置浏览器大小的过程中，页面也会根据浏览器的宽度和高度重新渲染页面</li></ol><h4 id="_2-1语法" tabindex="-1"><a class="header-anchor" href="#_2-1语法"><span>2.1语法</span></a></h4><div class="language-css line-numbers-mode" data-ext="css" data-title="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@media</span> mediatype <span class="token keyword">and</span>|<span class="token keyword">not</span>|<span class="token keyword">only</span> <span class="token punctuation">(</span>media feature<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
 CSS-Code<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>用 @media 开头 注意@符号</li><li>mediatype 媒体类型</li><li>关键字 and not only</li><li>media feature 媒体特性 必须有小括号包含</li></ul><h4 id="_2-2类型值" tabindex="-1"><a class="header-anchor" href="#_2-2类型值"><span>2.2类型值</span></a></h4><p><code>mediatype</code> 查询类型</p><table><thead><tr><th>值</th><th>解释说明</th></tr></thead><tbody><tr><td><code>all</code></td><td>用于所有设备</td></tr><tr><td><code>print</code></td><td>用于打印机或打印预览</td></tr><tr><td><code>scree</code></td><td>用于电脑屏幕，平板电脑，智能手机等</td></tr></tbody></table><h4 id="_2-3关键字" tabindex="-1"><a class="header-anchor" href="#_2-3关键字"><span>2.3关键字</span></a></h4><ol><li><code>and</code>：可以将多个媒体特性连接到一起，相当于“且”的意思。</li><li><code>not</code>：排除某个媒体类型，相当于“非”的意思，可以省略。</li><li><code>only</code>：指定某个特定的媒体类型，可以省略。</li></ol><h4 id="_2-4媒体特性" tabindex="-1"><a class="header-anchor" href="#_2-4媒体特性"><span>2.4媒体特性</span></a></h4><table><thead><tr><th>值</th><th>解释说明</th></tr></thead><tbody><tr><td><code>width</code></td><td>定义输出设备中页面可见区域的宽度</td></tr><tr><td><code>min-width</code></td><td>定义输出设备中页面最小可见区域宽度</td></tr><tr><td><code>max-width</code></td><td>定义输出设备中页面最大可见区域宽度</td></tr></tbody></table><p>媒体查询+rem 就可以实现不同设备宽度，实现页面元素大小的动态变化</p>`,177),o=[p];function c(i,l){return a(),s("div",null,o)}const u=n(e,[["render",c],["__file","Layout.html.vue"]]),g=JSON.parse('{"path":"/base/CSS3/Layout.html","title":"CSS布局","lang":"zh-CN","frontmatter":{"order":2,"description":"CSS布局 传统布局方式 1.浮动布局 1.1浮动原理 使当前元素脱离默认文档流，相当于让元素浮动了起来。再按照代码的先后顺序依次从左至右(float:left;) /从右至左(float:right)排开，直到元素的margin遇见父级元素padding或其他浮动元素的边缘 1.2浮动的影响 对元素的影响： 块级元素转为行内元素，宽高（不设宽高）由内...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/Blog/base/CSS3/Layout.html"}],["meta",{"property":"og:site_name","content":"取名花光钱"}],["meta",{"property":"og:title","content":"CSS布局"}],["meta",{"property":"og:description","content":"CSS布局 传统布局方式 1.浮动布局 1.1浮动原理 使当前元素脱离默认文档流，相当于让元素浮动了起来。再按照代码的先后顺序依次从左至右(float:left;) /从右至左(float:right)排开，直到元素的margin遇见父级元素padding或其他浮动元素的边缘 1.2浮动的影响 对元素的影响： 块级元素转为行内元素，宽高（不设宽高）由内..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/Snipaste_2022-10-09_10-14-17.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"取名花光钱"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CSS布局\\",\\"image\\":[\\"https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/Snipaste_2022-10-09_10-14-17.png\\",\\"https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/2020060612134865.png\\",\\"https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/20200826161110660.png\\",\\"https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/95ceb4ca6af6453da77a4b77a9fd5204.png\\",\\"https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/1fc0579d0f6d4fecac618952a58c4d14.png\\",\\"https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/5bd9012146c44a148d75671d4e8c0f62.png\\",\\"https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/19a96b0e1bdd41c28a36ad124972ca4b.png\\",\\"https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/1_bg2019032502.png\\",\\"https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/1_bg2019032503.png\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"取名花光钱\\",\\"url\\":\\"https://molimamcc.github.io/Blog/\\"}]}"]]},"headers":[{"level":2,"title":"传统布局方式","slug":"传统布局方式","link":"#传统布局方式","children":[{"level":3,"title":"1.浮动布局","slug":"_1-浮动布局","link":"#_1-浮动布局","children":[]},{"level":3,"title":"2.定位布局","slug":"_2-定位布局","link":"#_2-定位布局","children":[]}]},{"level":2,"title":"新式布局方式","slug":"新式布局方式","link":"#新式布局方式","children":[{"level":3,"title":"1.Flex布局","slug":"_1-flex布局","link":"#_1-flex布局","children":[]},{"level":3,"title":"2.Grid布局","slug":"_2-grid布局","link":"#_2-grid布局","children":[]}]},{"level":2,"title":"移动端布局","slug":"移动端布局","link":"#移动端布局","children":[{"level":3,"title":"1.rem","slug":"_1-rem","link":"#_1-rem","children":[]},{"level":3,"title":"2.媒体查询(Media Query)","slug":"_2-媒体查询-media-query","link":"#_2-媒体查询-media-query","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":12.28,"words":3683},"filePathRelative":"base/CSS3/Layout.md","excerpt":"\\n<h2>传统布局方式</h2>\\n<h3>1.浮动布局</h3>\\n<h4>1.1浮动原理</h4>\\n<p>使当前元素脱离默认文档流，相当于让元素浮动了起来。再按照代码的先后顺序依次从左至右(float:left;) /从右至左(float:right)排开，直到元素的margin遇见父级元素padding或其他浮动元素的边缘</p>\\n<h4>1.2浮动的影响</h4>\\n<p>对元素的影响：</p>\\n<p><strong>块级元素</strong>转为行内元素，宽高（不设宽高）由内容撑起，<strong>行内元素</strong>可以设置宽高</p>\\n<p>对兄弟元素的影响：</p>\\n<ul>\\n<li>会遮挡块级元素(后面兄弟节点)，但不会遮挡文本和行内元素</li>\\n<li>不遮挡上面块级元素的位置和文本</li>\\n</ul>","autoDesc":true}');export{u as comp,g as data};
