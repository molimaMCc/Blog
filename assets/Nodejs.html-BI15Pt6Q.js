import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-otQn-0y1.js";const e={},p=t(`<h1 id="node-js" tabindex="-1"><a class="header-anchor" href="#node-js"><span>Node.js</span></a></h1><p>什么是nodejs？一个基于 Chrome V8 解析引擎的 JavaScript 运行时环境，可进行后端开发</p><h2 id="_1-模块化相关规范" tabindex="-1"><a class="header-anchor" href="#_1-模块化相关规范"><span>1.模块化相关规范</span></a></h2><h3 id="浏览器端" tabindex="-1"><a class="header-anchor" href="#浏览器端"><span>浏览器端</span></a></h3><p><strong>AMDA</strong></p><p>Require.js (http://www.requirejs.cn)</p><p><strong>CMD</strong></p><p>Sea.js (https://seajs.github.io/seajs/docs)</p><h3 id="服务端" tabindex="-1"><a class="header-anchor" href="#服务端"><span>服务端</span></a></h3><p><strong>CommonJS</strong></p><ol><li>模块分为单文件模块 与 包</li><li>模块成员导出 module.exports 和 exports</li><li>模块成员引入：require(&#39;模块标识符&#39;)</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 模块定义</span>
<span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./moduleA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">sayHello</span><span class="token operator">:</span> sayHello
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 模块引入</span>
<span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./moduleA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

moduleA<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 模块导出</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> add<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="大一统的模块化规范-es6" tabindex="-1"><a class="header-anchor" href="#大一统的模块化规范-es6"><span>大一统的模块化规范-ES6</span></a></h3><ul><li>每个JS文件都是一个独立模块</li><li>导入模块成员使用import</li><li>暴露模块成员使用export</li></ul><h4 id="node-js中通过babel体验es6模块化" tabindex="-1"><a class="header-anchor" href="#node-js中通过babel体验es6模块化"><span>Node.js中通过babel体验ES6模块化</span></a></h4><ul><li>npm install--save-dev ebabel/core Qbabel/cli Qbabel/preset-env ebabel/node</li><li>npm install--save@babel/polyfill</li><li>项目跟目录创建文件babel.config.js</li><li>babel.config.js文件内容如右侧代码</li><li>通过npx babel-node index.js执行代码</li></ul><p>现在node高版本已经完全支持ES6模块化</p><h4 id="es6模块化代码" tabindex="-1"><a class="header-anchor" href="#es6模块化代码"><span>ES6模块化代码</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 分别暴露</span>
<span class="token keyword">export</span> <span class="token keyword">let</span> school <span class="token operator">=</span> <span class="token string">&#39;清华&#39;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">finejob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我能为你找工作&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 统一暴露</span>
<span class="token keyword">let</span> school2 <span class="token operator">=</span> <span class="token string">&#39;北大&#39;</span>

<span class="token keyword">function</span> <span class="token function">bigschool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我们是北京大学&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> school2<span class="token punctuation">,</span> bigschool <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 默认暴露</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">school</span><span class="token operator">:</span> <span class="token string">&#39;尚硅谷&#39;</span><span class="token punctuation">,</span>
    <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我们可以改变你&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 通用引入</span>
<span class="token comment">// 引入m.js 模块</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> m form <span class="token string">&#39;./src/js/m.js&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 解构赋值形式</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>school<span class="token punctuation">,</span>teach<span class="token punctuation">}</span> form <span class="token string">&#39;./src/js/m.js&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 简便形式 针对默认暴露</span>
<span class="token keyword">import</span> m <span class="token keyword">from</span>  <span class="token string">&#39;./src/js/m.js&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>ES6和CommonJS区别</p><ol><li>语法差异： CommonJS使用require和module.exports来导入和导出模块，而ES6使用import和export关键字。</li><li>静态解析： ES6模块化规范在编译时进行静态解析，这意味着模块的依赖关系在编译时就确定了，而不是在运行时。这使得编译器可以进行更好的优化和静态分析。</li><li>异步加载： ES6模块化支持异步加载模块，可以通过import()函数动态地加载模块。这对于按需加载和动态加载模块非常有用。</li><li>浏览器支持： ES6模块化规范在现代浏览器中得到了广泛支持，可以直接在浏览器中使用，而不需要使用额外的模块加载器。</li></ol><h2 id="_2-事件驱动" tabindex="-1"><a class="header-anchor" href="#_2-事件驱动"><span>2.事件驱动</span></a></h2><h3 id="_2-1-概念" tabindex="-1"><a class="header-anchor" href="#_2-1-概念"><span>2.1 概念</span></a></h3><p>事件驱动是nodejs核心概念之一，事件驱动是通过事件循环（event loop）和事件处理机制来实现的。</p><p>下面是事件驱动的一个简单事例</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> EventEmitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;events&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建事件触发器</span>
<span class="token keyword">const</span> myEmitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 注册事件监听器</span>
myEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;myEvent&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Event triggered!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 触发事件</span>
myEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;myEvent&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过事件驱动的方式，Node.js能够高效地处理并发操作，例如处理大量的IO操作、网络请求、数据库查询等。它利用事件循环和非阻塞IO模型，使得在单个线程中可以同时处理多个请求，提高了应用程序的性能和吞吐量。</p><h3 id="_2-2-js在浏览器环境下和node环境下的区别" tabindex="-1"><a class="header-anchor" href="#_2-2-js在浏览器环境下和node环境下的区别"><span>2.2 JS在浏览器环境下和node环境下的区别</span></a></h3><ol><li><p>全局对象： 在浏览器环境中，全局对象是window对象，在Node.js中，全局对象是<code>global</code>对象。</p></li><li><p>DOM和BOM： 浏览器环境中提供了DOM（文档对象模型）和BOM（浏览器对象模型）这两个额外的API。</p><p>在Node.js中没有DOM和BOM，因为Node.js运行在服务器端，没有浏览器窗口和网页文档的概念。Node.js提供了一些内置模块，如文件系统（fs）、网络（http、https）等，用于处理服务器端的操作。</p></li><li><p>异步操作： 浏览器环境中的JavaScript可以通过异步API（如setTimeout、XMLHttpRequest、fetch等）执行异步操作。这些API通常涉及到网络请求、定时器等。</p><p>Node.js也支持异步操作，但在处理IO操作时采用了不同的方式。在Node.js中，使用回调函数、Promise、async/await等方式来处理异步操作。Node.js提供了一些内置模块，如fs、http等，支持异步的文件操作和网络请求。</p></li><li><p>模块加载： 在浏览器环境中，模块加载通常使用script标签来引入外部脚本文件。也可以使用模块加载器（如RequireJS、SystemJS）来实现模块化开发。</p><p>在Node.js中，使用CommonJS规范进行模块加载。可以使用require函数来引入其他模块，使用module.exports或exports导出模块功能。</p></li></ol><h3 id="_2-3-在事件循环上的区别" tabindex="-1"><a class="header-anchor" href="#_2-3-在事件循环上的区别"><span>2.3 在事件循环上的区别</span></a></h3><ol><li><p>事件触发源： 在浏览器环境中，事件触发源主要是与用户交互相关的事件，如点击事件、键盘事件、鼠标事件等。此外，还有一些与浏览器操作相关的事件，例如加载完成事件（load事件）和文档解析完成事件（DOMContentLoaded事件）等。</p><p>在Node.js环境中，事件触发源主要是与IO操作相关的事件，例如文件读写完成事件、网络请求完成事件等。Node.js通过使用非阻塞IO模型，能够在执行IO操作时不阻塞其他代码的执行，从而提高了系统的并发能力。</p></li><li><p>事件循环的实现： 浏览器环境和Node.js环境在事件循环的实现上也存在差异。</p><ul><li>浏览器环境：浏览器中的事件循环是由浏览器引擎实现的，其中包括渲染引擎和JavaScript引擎。浏览器引擎会维护一个事件队列，将事件按照特定的顺序进行处理，包括渲染页面、响应用户交互、执行JavaScript代码等。</li><li>Node.js环境：Node.js中的事件循环则是由Node.js自身的运行时环境实现的。Node.js使用单线程的事件循环机制来处理并发操作。事件循环在循环中不断地检查事件队列，当有事件触发时，会调用相应的事件处理器。</li></ul></li><li><p>阻塞与非阻塞： 在浏览器环境中，JavaScript的执行通常是阻塞的。也就是说，当JavaScript代码执行时，会阻塞浏览器的渲染和用户交互响应。这就是为什么长时间运行的JavaScript代码会导致页面失去响应。</p><p>而在Node.js环境中，JavaScript的执行是非阻塞的。当执行耗时的操作时，例如读取文件或发送网络请求，Node.js会将这些操作委托给系统进行处理，并立即继续执行后续代码。一旦操作完成，系统会通知Node.js，并触发相应的事件。</p></li><li><p>对宏任务与微任务的处理</p></li></ol><p>在浏览器环境中：</p><ul><li>执行当前宏任务</li><li>执行所有微任务</li><li>渲染页面更新</li><li>等待下一个宏任务（如果没有其他宏任务，则等待用户交互事件）</li></ul><p>在Node.js环境中：</p><ul><li>执行当前宏任务队列中的所有任务</li><li>执行所有微任务</li><li>等待下一个宏任务（如果没有其他宏任务，则等待事件触发）</li></ul><h2 id="_3-eventemitter" tabindex="-1"><a class="header-anchor" href="#_3-eventemitter"><span>3.EventEmitter</span></a></h2><p>Node.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列。</p><p>Node.js 里面的许多对象都会分发事件：一个 net.Server 对象会在每次有新连接时触发一个事件， 一个 fs.readStream 对象会在文件被打开的时候触发一个事件。 所有这些产生事件的对象都是 events.EventEmitter 的实例。</p><h3 id="_3-1-eventemitter类" tabindex="-1"><a class="header-anchor" href="#_3-1-eventemitter类"><span>3.1 EventEmitter类</span></a></h3><p>events 模块只提供了一个对象： events.EventEmitter。EventEmitter 的核心就是事件触发与事件监听器功能的封装，通过require(&quot;events&quot;)访问</p><p>使用事例具体看2.1</p><p>一个事件可以有多个事件监听器，当事件触发时，注册到这个事件的事件监听器被依次调用，事件参数作为回调函数参数传递。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 一个事件注册多个监听器</span>
<span class="token comment">//event.js 文件</span>
<span class="token keyword">var</span> EventEmitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;events&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">var</span> emitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
emitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;someEvent&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">arg1<span class="token punctuation">,</span> arg2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;listener1&#39;</span><span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
emitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;someEvent&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">arg1<span class="token punctuation">,</span> arg2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;listener2&#39;</span><span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;someEvent&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;arg1 参数&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;arg2 参数&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// 打印结果</span>
<span class="token comment">// listener1 arg1 参数 arg2 参数</span>
<span class="token comment">// listener2 arg1 参数 arg2 参数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-方法" tabindex="-1"><a class="header-anchor" href="#_3-2-方法"><span>3.2 方法</span></a></h3><p>EventEmitter 提供很多的属性，如on和emit</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><strong>addListener(event, listener)</strong></td><td>为指定事件添加一个监听器到监听器数组的尾部。</td></tr><tr><td><strong>on(event, listener)</strong></td><td>为指定事件注册一个监听器，接受一个字符串 event 和一个回调函数。</td></tr><tr><td><strong>once(event, listener)</strong></td><td>为指定事件注册一个单次监听器，即 监听器最多只会触发一次，触发后立刻解除该监听器。</td></tr><tr><td><strong>removeListener(event, listener)</strong></td><td>移除指定事件的某个监听器，监听器必须是该事件已经注册过的监听器。它接受两个参数，第一个是事件名称，第二个是回调函数名称。</td></tr><tr><td><strong>removeAllListeners([event])</strong></td><td>移除所有事件的所有监听器， 如果指定事件，则移除指定事件的所有监听器。</td></tr><tr><td><strong>setMaxListeners(n)</strong></td><td>默认情况下， EventEmitters 如果你添加的监听器超过 10 个就会输出警告信息。 setMaxListeners 函数用于改变监听器的默认限制的数量。</td></tr><tr><td><strong>listeners(event)</strong></td><td>返回指定事件的监听器数组。</td></tr><tr><td><strong>emit(event, [arg1], [arg2], [...])</strong></td><td>按监听器的顺序执行执行每个监听器，如果事件有注册监听返回 true，否则返回 false。</td></tr></tbody></table><p>类方法</p><p><strong>listenerCount(eventName)</strong>：返回指定事件的监听器数量，一个整数</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>events<span class="token punctuation">.</span>emitter<span class="token punctuation">.</span><span class="token function">listenerCount</span><span class="token punctuation">(</span>eventName<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-3事件" tabindex="-1"><a class="header-anchor" href="#_3-3事件"><span>3.3事件</span></a></h3><table><thead><tr><th style="text-align:center;">事件</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>newListener(事件名称,回调)</strong></td><td>该事件在添加新监听器时被触发。</td></tr><tr><td style="text-align:center;"><strong>removeListener(事件名称,回调)</strong></td><td>从指定监听器数组中删除一个监听器。需要注意的是，此操作将会改变处于被删监听器之后的那些监听器的索引。</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> EventEmitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;events&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> eventEmitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 监听器 #1</span>
<span class="token keyword">var</span> <span class="token function-variable function">listener1</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">listener1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;监听器 listener1 执行。&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 监听器 #2</span>
<span class="token keyword">var</span> <span class="token function-variable function">listener2</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">listener2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;监听器 listener2 执行。&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 绑定 connection 事件，处理函数为 listener1 </span>
eventEmitter<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> listener1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 绑定 connection 事件，处理函数为 listener2</span>
eventEmitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> listener2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> eventListeners <span class="token operator">=</span> eventEmitter<span class="token punctuation">.</span><span class="token function">listenerCount</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>eventListeners <span class="token operator">+</span> <span class="token string">&quot; 个监听器监听连接事件。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 处理 connection 事件 </span>
eventEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 移除监绑定的 listener1 函数</span>
eventEmitter<span class="token punctuation">.</span><span class="token function">removeListener</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> listener1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;listener1 不再受监听。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 触发连接事件</span>
eventEmitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

eventListeners <span class="token operator">=</span> eventEmitter<span class="token punctuation">.</span><span class="token function">listenerCount</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>eventListeners <span class="token operator">+</span> <span class="token string">&quot; 个监听器监听连接事件。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;程序执行完毕。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//打印结果</span>
<span class="token comment">// 2 个监听器监听连接事件。</span>
<span class="token comment">//监听器 listener1 执行。</span>
<span class="token comment">//监听器 listener2 执行。</span>
<span class="token comment">//listener1 不再受监听。</span>
<span class="token comment">//监听器 listener2 执行。</span>
<span class="token comment">//1 个监听器监听连接事件。</span>
<span class="token comment">//程序执行完毕。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4error事件" tabindex="-1"><a class="header-anchor" href="#_3-4error事件"><span>3.4error事件</span></a></h3><p>EventEmitter 定义了一个特殊的事件 error，它包含了错误的语义，我们在遇到 异常的时候通常会触发 error 事件。</p><p>我们一般要为会触发 error 事件的对象设置监听器，避免遇到错误后整个程序崩溃</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> EventEmitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;events&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">var</span> emitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大多数时候我们不会直接使用 EventEmitter，而是在对象中继承它。包括 fs、net、 http 在内的，只要是支持事件响应的核心模块都是 EventEmitter 的子类。</p><h2 id="_4-buffer缓冲区" tabindex="-1"><a class="header-anchor" href="#_4-buffer缓冲区"><span>4. Buffer缓冲区</span></a></h2><p>JavaScript 有字符串的数据类型，但是没有二进制数据类型，当处理TCP流和文件流时必须要用到二进制数据，所以使用Buffer来存放二进制数据。Buffer类似整数数组，使用<strong>Buffer.from()</strong> 接口去创建Buffer对象</p><h3 id="_4-1-buffer-与字符编码" tabindex="-1"><a class="header-anchor" href="#_4-1-buffer-与字符编码"><span>4.1 Buffer 与字符编码</span></a></h3><p>Buffer 实例一般用于表示编码字符的序列</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 表示按ascii 编码字符串runoob</span>
<span class="token keyword">const</span> buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;runoob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ascii&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出 runoob</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;ascii&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出 72756e6f6f62</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;hex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出 cnVub29i</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;base64&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不加编码方式的参数将默认按UTF-8 来编码</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//我们可以通过这样的编码方式将72756e6f6f62 重新解码为runoob</span>
<span class="token keyword">const</span> hexString <span class="token operator">=</span> <span class="token string">&#39;72756e6f6f62&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>hexString<span class="token punctuation">,</span> <span class="token string">&#39;hex&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> decodedString <span class="token operator">=</span> buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;ascii&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>decodedString<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：runoob</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Nodejs支持的字符编码</strong></p><table><thead><tr><th style="text-align:center;">编码方式</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>ascii</strong></td><td>仅支持 7 位 ASCII 数据。如果设置去掉高位的话，这种编码是非常快的。</td></tr><tr><td style="text-align:center;"><strong>utf8</strong></td><td>多字节编码的 Unicode 字符。许多网页和其他文档格式都使用 UTF-8 。</td></tr><tr><td style="text-align:center;"><strong>utf16le</strong></td><td>2 或 4 个字节，小字节序编码的 Unicode 字符。支持代理对（U+10000 至 U+10FFFF）。</td></tr><tr><td style="text-align:center;"><strong>ucs2</strong></td><td><strong>utf16le</strong> 的别名。</td></tr><tr><td style="text-align:center;"><strong>base64</strong></td><td>Base64 编码</td></tr><tr><td style="text-align:center;"><strong>latin1</strong></td><td>一种把 <strong>Buffer</strong> 编码成一字节编码的字符串的方式。</td></tr><tr><td style="text-align:center;"><strong>binary</strong></td><td><strong>latin1</strong> 的别名。</td></tr><tr><td style="text-align:center;"><strong>hex</strong></td><td>将每个字节编码为两个十六进制字符。</td></tr></tbody></table><h3 id="_4-2-buffer类" tabindex="-1"><a class="header-anchor" href="#_4-2-buffer类"><span>4.2 Buffer类</span></a></h3><p>Buffer 提供了以下 API 来创建 Buffer 类：</p><ol><li><strong>Buffer.alloc(size[, fill[, encoding]])：</strong> 返回一个指定大小的 Buffer 实例，如果没有设置 fill，则默认填满 0</li><li><strong>Buffer.allocUnsafe(size)：</strong> 返回一个指定大小的 Buffer 实例，但是它不会被初始化，所以它可能包含敏感的数据</li><li><strong>Buffer.allocUnsafeSlow(size)</strong>：用于创建指定大小的未初始化的 Buffer 实例。 使用了较慢的内存分配策略。它适用于较大的缓冲区，且在内存分配时可能会导致较高的开销。</li><li><strong>Buffer.from(array)：</strong> 返回一个被 array 的值初始化的新的 Buffer 实例（传入的 array 的元素只能是数字，不然就会自动被 0 覆盖）</li><li><strong>Buffer.from(arrayBuffer，byteOffset, length)：</strong> 返回一个新建的与给定的 ArrayBuffer 共享同一内存的 Buffer。<code>ArrayBuffer</code> 用于表示一段固定大小的二进制数据。<code>byteOffset</code>（可选）：指定从 <code>arrayBuffer</code> 的哪个字节开始创建 Buffer 实例，默认为 0，<code>length</code>（可选）：指定要创建的 Buffer 实例的长度，默认为 <code>arrayBuffer</code> 的剩余字节长度。</li><li><strong>Buffer.from(buffer)：</strong> 复制传入的 Buffer 实例的数据，并返回一个新的 Buffer 实例</li><li><strong>Buffer.from(string，encoding)：</strong> 返回一个被 string 的值初始化的新的 Buffer 实例，encoding指编码方式</li></ol><p>以下事例按序号对比上面序号：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 1.创建一个长度为 10、且用 0 填充的 Buffer。</span>
<span class="token keyword">const</span> buf1 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个长度为 10、且用 0x1 填充的 Buffer。 </span>
<span class="token keyword">const</span> buf2 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2.创建一个长度为 10、且未初始化的 Buffer。</span>
<span class="token comment">// 这个方法比调用 Buffer.alloc() 更快，</span>
<span class="token comment">// 但返回的 Buffer 实例可能包含旧数据，</span>
<span class="token comment">// 因此需要使用 fill() 或 write() 重写。</span>
<span class="token keyword">const</span> buf3 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">allocUnsafe</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 4.创建一个包含 [0x1, 0x2, 0x3] 的 Buffer。</span>
<span class="token keyword">const</span> buf4 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 5.创建了一个大小为 8 的 ArrayBuffer 对象 arrayBuffer，然后将其转换为 Buffer 实例 buffer</span>
<span class="token keyword">const</span> arrayBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> buffer <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arrayBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 8</span>

<span class="token comment">// 7.创建一个包含 UTF-8 字节 [0x74, 0xc3, 0xa9, 0x73, 0x74] 的 Buffer。</span>
<span class="token keyword">const</span> buf5 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;tést&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个包含 Latin-1 字节 [0x74, 0xe9, 0x73, 0x74] 的 Buffer。</span>
<span class="token keyword">const</span> buf6 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;tést&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;latin1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-buffer的一些方法说明" tabindex="-1"><a class="header-anchor" href="#_4-3-buffer的一些方法说明"><span>4.3 Buffer的一些方法说明</span></a></h3><h4 id="_4-3-1-写入数据" tabindex="-1"><a class="header-anchor" href="#_4-3-1-写入数据"><span>4.3.1 写入数据</span></a></h4><p><strong>buf.write(string，offset，length，encoding)</strong></p><ul><li><strong>string</strong> - 写入缓冲区的字符串。</li><li><strong>offset</strong> - 缓冲区开始写入的索引值，默认为 0 。</li><li><strong>length</strong> - 写入的字节数，默认为 buffer.length</li><li><strong>encoding</strong> - 使用的编码。默认为 &#39;utf8&#39; 。</li><li><strong>返回</strong>实际写入的大小。如果 buffer 空间不足， 则只会写入部分字符串。</li></ul><p>根据字符编码方式将string写入到 buf 中的 offset 位置。 length 参数是写入的字节数。 如果 buf 没有足够的空间保存整个字符串，则只会写入 string 的一部分。 只部分解码的字符不会被写入。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个256字节大小的buf</span>
buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
len <span class="token operator">=</span> buf<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;www.runoob.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;写入字节数 : &quot;</span><span class="token operator">+</span>  len<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 写入字节数：14</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-2读出数据" tabindex="-1"><a class="header-anchor" href="#_4-3-2读出数据"><span>4.3.2读出数据</span></a></h4><p><strong>buf.toString(encoding，start，end)</strong></p><ul><li><strong>encoding</strong> - 使用的编码。默认为 &#39;utf8&#39; 。</li><li><strong>start</strong> - 指定开始读取的索引位置，默认为 0。</li><li><strong>end</strong> - 结束位置，默认为缓冲区的末尾。</li><li>返回解码缓冲区数据并使用指定的编码返回字符串。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;ascii&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 输出: abcdefghijklmnopqrstuvwxyz</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;ascii&#39;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//使用 &#39;ascii&#39; 编码, 并输出: abcde</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用 &#39;utf8&#39; 编码, 并输出: abcde</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用默认的 &#39;utf8&#39; 编码, 并输出: abcde</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-3-buffer-转换为-json-对象" tabindex="-1"><a class="header-anchor" href="#_4-3-3-buffer-转换为-json-对象"><span>4.3.3 Buffer 转换为 JSON 对象</span></a></h4><p><strong>buf.toJSON()</strong></p><p>当字符串化一个 Buffer 实例时，JSON.stringify()会隐式地调用该 toJSON()</p><p>返回 JSON 对象</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0x1</span><span class="token punctuation">,</span> <span class="token number">0x2</span><span class="token punctuation">,</span> <span class="token number">0x3</span><span class="token punctuation">,</span> <span class="token number">0x4</span><span class="token punctuation">,</span> <span class="token number">0x5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出: {&quot;type&quot;:&quot;Buffer&quot;,&quot;data&quot;:[1,2,3,4,5]}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> copy <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> value <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;Buffer&#39;</span> <span class="token operator">?</span>
    Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">:</span>
    value<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出: &lt;Buffer 01 02 03 04 05&gt;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copy<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-4-缓冲区合并" tabindex="-1"><a class="header-anchor" href="#_4-3-4-缓冲区合并"><span>4.3.4 缓冲区合并</span></a></h4><p><strong>Buffer.concat(list，totalLength)</strong></p><ul><li><strong>list</strong> - 用于合并的 Buffer 对象数组列表。</li><li><strong>totalLength</strong> - 指定合并后Buffer对象的总长度。</li><li>返回一个多个成员合并的新 Buffer 对象。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> buffer1 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&#39;牛牛&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> buffer2 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&#39;www.runoob.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> buffer3 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>buffer1<span class="token punctuation">,</span>buffer2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 打印 牛牛www.runoob.com</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;buffer3 内容: &quot;</span> <span class="token operator">+</span> buffer3<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-5-缓冲区比较" tabindex="-1"><a class="header-anchor" href="#_4-3-5-缓冲区比较"><span>4.3.5 缓冲区比较</span></a></h4><p><strong>buf.compare(otherBuffer)</strong></p><ul><li><p><strong>otherBuffer</strong> - 与 <strong>buf</strong> 对象比较的另外一个 Buffer 对象。</p></li><li><p>如果 <code>buf</code> 的字节序列在字典排序中排在 <code>otherBuffer</code> 之前，则返回一个负数。</p></li><li><p>如果 <code>buf</code> 的字节序列在字典排序中排在 <code>otherBuffer</code> 之后，则返回一个正数。</p></li><li><p>如果 <code>buf</code> 的字节序列与 <code>otherBuffer</code> 相同，则返回 0。</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> buf1 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;ABC&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> buf2 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;DEF&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> buf1<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>buf2<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 -3	</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字节序列的比较结果取决于所使用的字符编码和每个字符在该编码下所占用的字节数。对于不同的字符编码和不同的字符集，字节序列的比较结果可能会有所不同。</p><h4 id="_4-3-6-拷贝缓冲区" tabindex="-1"><a class="header-anchor" href="#_4-3-6-拷贝缓冲区"><span>4.3.6 拷贝缓冲区</span></a></h4><p><strong>buf.copy(targetBuffer，targetStart，sourceStart，sourceEnd)</strong></p><ul><li><strong>targetBuffer</strong> - 要拷贝的 Buffer 对象。</li><li><strong>targetStart</strong> - 数字, 可选, 默认: 0,表示目标 Buffer 实例中复制的起始位</li><li><strong>sourceStart</strong> - 数字, 可选, 默认: 0,表示源 Buffer 实例中复制的起始位置</li><li><strong>sourceEnd</strong> - 数字, 可选, 默认: buffer.length,表示源 Buffer 实例中复制的结束位置。</li><li>没有返回值</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 例1</span>
<span class="token keyword">const</span> buf1 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;abcdefghijkl&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> buf2 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;RUNOOB&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//将 buf2 插入到 buf1 指定位置上</span>
buf2<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>buf1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//abRUNOOBijkl</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buf1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//例2</span>
<span class="token keyword">const</span> sourceBuffer <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, world!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> targetBuffer <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 创建一个长度为 10 的目标 Buffer 实例</span>

sourceBuffer<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>targetBuffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 复制源 Buffer 的前 5 个字节到目标 Buffer 中</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>targetBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 &quot;Hello&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-7-裁剪缓冲区" tabindex="-1"><a class="header-anchor" href="#_4-3-7-裁剪缓冲区"><span>4.3.7 裁剪缓冲区</span></a></h4><p><strong>buf.slice(start，end)</strong></p><ul><li><strong>start</strong> - 数字, 可选, 默认: 0</li><li><strong>end</strong> - 数字, 可选, 默认: buffer.length</li><li>返回一个新的缓冲区，它和旧缓冲区指向同一块内存，但是从索引 start 到 end 的位置剪切。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> originalBuffer <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, world!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> slicedBuffer <span class="token operator">=</span> originalBuffer<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 从索引位置 7 到 12（不包含索引位置 12）的部分</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>slicedBuffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 &quot;world&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>buf.slice()</code> 方法，可以从原始 Buffer 实例中提取所需的部分内容，而无需复制整个 Buffer 实例。这在需要截取原始 Buffer 实例的片段时非常有用，可以减少内存使用和提高性能。</p><h4 id="_4-3-8-填充缓冲区" tabindex="-1"><a class="header-anchor" href="#_4-3-8-填充缓冲区"><span>4.3.8 填充缓冲区</span></a></h4><p><strong>buf.fill(value，offset，end，encoding)</strong></p><p>该方法将指定的值（<code>value</code>）填充到 Buffer 实例中的指定范围内</p><ul><li><code>value</code>：要填充的值，可以是整数或字符串。如果是整数，则会将该整数值的字节表示填充到 Buffer 实例中；如果是字符串，则会根据指定的编码将字符串转换为字节序列进行填充。</li><li><code>offset</code>（可选）：一个可选的整数参数，表示填充的起始位置，默认为 0，即从 Buffer 实例的开头开始填充。</li><li><code>end</code>（可选）：一个可选的整数参数，表示填充的结束位置（不包含该位置的字节），默认为 Buffer 实例的末尾。</li><li><code>encoding</code>（可选）：一个可选的字符串参数，表示使用的字符编码。仅在 <code>value</code> 参数为字符串时有效，默认为 <code>&#39;utf8&#39;</code>。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> buffer <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 创建一个长度为 10 的 Buffer 实例</span>

buffer<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 以 ASCII 值 65（&#39;A&#39;）填充整个 Buffer</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出 &lt;Buffer 41 41 41 41 41 41 41 41 41 41&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-其他属性-方法" tabindex="-1"><a class="header-anchor" href="#_4-4-其他属性-方法"><span>4.4 其他属性&amp;方法</span></a></h3><table><thead><tr><th style="text-align:center;">属性&amp;方法</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>buf.length</strong></td><td>返回这个 buffer 的 bytes 数。不一定是内容大小</td></tr><tr><td style="text-align:center;"><strong>buf[index]</strong></td><td>获取或设置指定的字节。返回值代表一个字节，所以返回值的合法范围是十六进制0x00到0xFF 或者十进制0至 255。</td></tr><tr><td style="text-align:center;"><strong>buf.equals(otherBuffer)</strong></td><td>比较两个缓冲区是否相等，如果是返回 true，否则返回 false</td></tr></tbody></table>`,118),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","Nodejs.html.vue"]]),k=JSON.parse(`{"path":"/base/JavaScript/Nodejs.html","title":"Node.js","lang":"zh-CN","frontmatter":{"description":"Node.js 什么是nodejs？一个基于 Chrome V8 解析引擎的 JavaScript 运行时环境，可进行后端开发 1.模块化相关规范 浏览器端 AMDA Require.js (http://www.requirejs.cn) CMD Sea.js (https://seajs.github.io/seajs/docs) 服务端 Comm...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/Blog/base/JavaScript/Nodejs.html"}],["meta",{"property":"og:site_name","content":"取名花光钱"}],["meta",{"property":"og:title","content":"Node.js"}],["meta",{"property":"og:description","content":"Node.js 什么是nodejs？一个基于 Chrome V8 解析引擎的 JavaScript 运行时环境，可进行后端开发 1.模块化相关规范 浏览器端 AMDA Require.js (http://www.requirejs.cn) CMD Sea.js (https://seajs.github.io/seajs/docs) 服务端 Comm..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"取名花光钱"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Node.js\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"取名花光钱\\",\\"url\\":\\"https://molimamcc.github.io/Blog/\\"}]}"]]},"headers":[{"level":2,"title":"1.模块化相关规范","slug":"_1-模块化相关规范","link":"#_1-模块化相关规范","children":[{"level":3,"title":"浏览器端","slug":"浏览器端","link":"#浏览器端","children":[]},{"level":3,"title":"服务端","slug":"服务端","link":"#服务端","children":[]},{"level":3,"title":"大一统的模块化规范-ES6","slug":"大一统的模块化规范-es6","link":"#大一统的模块化规范-es6","children":[]}]},{"level":2,"title":"2.事件驱动","slug":"_2-事件驱动","link":"#_2-事件驱动","children":[{"level":3,"title":"2.1 概念","slug":"_2-1-概念","link":"#_2-1-概念","children":[]},{"level":3,"title":"2.2 JS在浏览器环境下和node环境下的区别","slug":"_2-2-js在浏览器环境下和node环境下的区别","link":"#_2-2-js在浏览器环境下和node环境下的区别","children":[]},{"level":3,"title":"2.3 在事件循环上的区别","slug":"_2-3-在事件循环上的区别","link":"#_2-3-在事件循环上的区别","children":[]}]},{"level":2,"title":"3.EventEmitter","slug":"_3-eventemitter","link":"#_3-eventemitter","children":[{"level":3,"title":"3.1 EventEmitter类","slug":"_3-1-eventemitter类","link":"#_3-1-eventemitter类","children":[]},{"level":3,"title":"3.2 方法","slug":"_3-2-方法","link":"#_3-2-方法","children":[]},{"level":3,"title":"3.3事件","slug":"_3-3事件","link":"#_3-3事件","children":[]},{"level":3,"title":"3.4error事件","slug":"_3-4error事件","link":"#_3-4error事件","children":[]}]},{"level":2,"title":"4. Buffer缓冲区","slug":"_4-buffer缓冲区","link":"#_4-buffer缓冲区","children":[{"level":3,"title":"4.1 Buffer 与字符编码","slug":"_4-1-buffer-与字符编码","link":"#_4-1-buffer-与字符编码","children":[]},{"level":3,"title":"4.2 Buffer类","slug":"_4-2-buffer类","link":"#_4-2-buffer类","children":[]},{"level":3,"title":"4.3 Buffer的一些方法说明","slug":"_4-3-buffer的一些方法说明","link":"#_4-3-buffer的一些方法说明","children":[]},{"level":3,"title":"4.4 其他属性&方法","slug":"_4-4-其他属性-方法","link":"#_4-4-其他属性-方法","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":16.8,"words":5040},"filePathRelative":"base/JavaScript/Nodejs.md","excerpt":"\\n<p>什么是nodejs？一个基于 Chrome V8 解析引擎的 JavaScript 运行时环境，可进行后端开发</p>\\n<h2>1.模块化相关规范</h2>\\n<h3>浏览器端</h3>\\n<p><strong>AMDA</strong></p>\\n<p>Require.js (http://www.requirejs.cn)</p>\\n<p><strong>CMD</strong></p>\\n<p>Sea.js (https://seajs.github.io/seajs/docs)</p>\\n<h3>服务端</h3>\\n<p><strong>CommonJS</strong></p>\\n<ol>\\n<li>模块分为单文件模块 与 包</li>\\n<li>模块成员导出 module.exports 和 exports</li>\\n<li>模块成员引入：require('模块标识符')</li>\\n</ol>","autoDesc":true}`);export{d as comp,k as data};
