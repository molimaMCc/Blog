import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e as t}from"./app-otQn-0y1.js";const e={},p=t(`<h1 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript"><span>TypeScript</span></a></h1><h2 id="ts概述" tabindex="-1"><a class="header-anchor" href="#ts概述"><span>TS概述</span></a></h2><h4 id="ts是javascript的一个超集" tabindex="-1"><a class="header-anchor" href="#ts是javascript的一个超集"><span>TS是JavaScript的一个超集</span></a></h4><p>TS是在JS的基础上添加了静态类型定义结构的强类型语言。</p><p>TypeScript通过TypeScript编译器或Babel转译为JavaScript代码，可运行在任何浏览器，任何操作系统。</p><h2 id="ts的环境搭建与配置文件" tabindex="-1"><a class="header-anchor" href="#ts的环境搭建与配置文件"><span>TS的环境搭建与配置文件</span></a></h2><h4 id="安装ts环境" tabindex="-1"><a class="header-anchor" href="#安装ts环境"><span>安装TS环境</span></a></h4><p><code>npm install -g typescript</code></p><h2 id="ts的数据类型" tabindex="-1"><a class="header-anchor" href="#ts的数据类型"><span>TS的数据类型</span></a></h2><h3 id="ts的基本数据类型" tabindex="-1"><a class="header-anchor" href="#ts的基本数据类型"><span>TS的基本数据类型</span></a></h3><h4 id="数字类型-number" tabindex="-1"><a class="header-anchor" href="#数字类型-number"><span>数字类型（number）</span></a></h4><p>TypeScript和JavaScript一样，不区分整数，浮点和双精度（int，float，double）</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code>
<span class="token keyword">let</span> binaryLiteral<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span><span class="token number">0b1010</span><span class="token punctuation">;</span>	  <span class="token comment">//二进制</span>
<span class="token keyword">let</span> octalLiteral<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span><span class="token number">0o744</span><span class="token punctuation">;</span>		 <span class="token comment">//八进制</span>
<span class="token keyword">let</span> decLiteral<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>			<span class="token comment">//十进制</span>
<span class="token keyword">let</span> hexLiteral<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span><span class="token number">0xf00d</span><span class="token punctuation">;</span>		<span class="token comment">//十六进制</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字符串类型-string" tabindex="-1"><a class="header-anchor" href="#字符串类型-string"><span>字符串类型（string）</span></a></h4><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">let</span> name<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;张三&#39;</span>
<span class="token keyword">let</span> age<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">5</span>
<span class="token keyword">let</span> words<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">您好，今年是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">的生日，他</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">岁了</span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="布尔类型-boolean" tabindex="-1"><a class="header-anchor" href="#布尔类型-boolean"><span>布尔类型（boolean）</span></a></h4><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">let</span> flag<span class="token operator">:</span><span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="数组类型" tabindex="-1"><a class="header-anchor" href="#数组类型"><span>数组类型</span></a></h4><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token comment">// 声明变量为数组。</span>
在元素类型后面加上<span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">let</span> arr<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token comment">// 或者使用泛型数组</span>
<span class="token keyword">let</span> arr<span class="token operator">:</span><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ts特殊数据类型" tabindex="-1"><a class="header-anchor" href="#ts特殊数据类型"><span>TS特殊数据类型</span></a></h3><h4 id="null和undefined" tabindex="-1"><a class="header-anchor" href="#null和undefined"><span>null和undefined</span></a></h4><p>在TS中用得较少，主要是为了兼容JS</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">let</span> name<span class="token operator">:</span><span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">//只能为null</span>
<span class="token keyword">let</span> age<span class="token operator">:</span><span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span> <span class="token comment">// 只能为undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="任意类型-any" tabindex="-1"><a class="header-anchor" href="#任意类型-any"><span>任意类型（any）</span></a></h4><p>可以赋值任何类型值，和原JavaScript的作用一样，相当于关闭了TS的类型检测，不推荐使用</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">let</span> tsName<span class="token operator">:</span><span class="token builtin">any</span>
tsName <span class="token operator">=</span> <span class="token number">1231</span>
tsName <span class="token operator">=</span> <span class="token string">&#39;wwww&#39;</span>

<span class="token comment">// 声明时不指定类型，则会解析为any类型</span>
<span class="token keyword">let</span> jsName
jsName <span class="token operator">=</span> <span class="token number">111</span>
jsName <span class="token operator">=</span> <span class="token string">&#39;www&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="unkwon未知类型" tabindex="-1"><a class="header-anchor" href="#unkwon未知类型"><span>unkwon未知类型</span></a></h4><p>表示一个安全的any，不能赋值给其他变量，只能赋值给<code>unknown</code>和<code>any</code>类型</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">let</span> f<span class="token operator">:</span><span class="token builtin">unknown</span> 
f <span class="token operator">=</span> <span class="token string">&#39;www&#39;</span>

<span class="token keyword">let</span> s<span class="token operator">:</span><span class="token builtin">string</span>
s <span class="token operator">=</span> f <span class="token comment">// 报错</span>

<span class="token keyword">let</span> b<span class="token operator">:</span>unknow 
<span class="token keyword">let</span> c<span class="token operator">:</span><span class="token builtin">any</span>
b <span class="token operator">=</span> f <span class="token comment">// 可以</span>
c <span class="token operator">=</span> f <span class="token comment">// 可以</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以通过缩小类型来赋值给其他变量</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">let</span> a<span class="token operator">:</span><span class="token builtin">unknown</span>
a <span class="token operator">=</span> <span class="token number">555</span>
<span class="token keyword">let</span> s<span class="token operator">:</span><span class="token builtin">string</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a <span class="token operator">==</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    s <span class="token operator">=</span> a
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用类型断言</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code>s <span class="token operator">=</span> a <span class="token keyword">as</span> <span class="token builtin">string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用泛型</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>s = &lt;string&gt; f
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="元组" tabindex="-1"><a class="header-anchor" href="#元组"><span>元组</span></a></h4><p>元组类型表示已经固定长度的数组，各元素类型不必相同，对应位置的类型需要相同</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">let</span> x<span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">number</span><span class="token punctuation">]</span>
x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;typescript&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">// 正确</span>
x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;typescript&#39;</span><span class="token punctuation">]</span> <span class="token comment">// 错误</span>

<span class="token comment">// 二维数组</span>
<span class="token keyword">let</span> arr<span class="token operator">:</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">&#39;李四&#39;</span>，<span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token string">&#39;王二&#39;</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="枚举-enum" tabindex="-1"><a class="header-anchor" href="#枚举-enum"><span>枚举（enum）</span></a></h4><p>枚举类型用于定义数值的集合，使用关键字<code>enum</code>创建，如果里面的值不指定，默认从0开始。无法修改里面的值，声明时已经确定了</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">enum</span> Color	<span class="token punctuation">{</span>Red<span class="token punctuation">,</span>Green<span class="token punctuation">,</span>Blue<span class="token punctuation">}</span> <span class="token comment">// Red = 0 Green = 1 Blue = 2</span>
<span class="token keyword">let</span> c<span class="token operator">:</span>Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Blue
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">// 输出 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="类型的别名" tabindex="-1"><a class="header-anchor" href="#类型的别名"><span>类型的别名</span></a></h4><p>使用关键字type，对于一些复杂的类型的声明时，可以运用别名快速声明</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">type</span> <span class="token class-name">mystate</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">5</span>
<span class="token keyword">let</span> state<span class="token operator">:</span>mysatte
state <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="void" tabindex="-1"><a class="header-anchor" href="#void"><span>void</span></a></h4><p>表示为空，用于标识方法返回值的类型，表示函数没有返回值</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="never类型-never" tabindex="-1"><a class="header-anchor" href="#never类型-never"><span>never类型 （never）</span></a></h4><p>never是其他类型的子类型，表示永远不会有返回值</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code>funtion <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">never</span> <span class="token punctuation">{</span>
    <span class="token comment">//这种报错没有返回值的</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;报错&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="object类型" tabindex="-1"><a class="header-anchor" href="#object类型"><span>Object类型</span></a></h4><p>一般采用<strong>类型推断</strong>的方式定义</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token punctuation">{</span>
	name<span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
	age<span class="token operator">:</span> <span class="token number">18</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>str对象的属性类型已经确定了，无法修改为其他的类型</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code>str<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token number">20</span> <span class="token comment">// 错误</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>还可以使用字面量声明的方式</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">let</span> user<span class="token operator">:</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">}</span>
user <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">&#39;李四&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">}</span>

<span class="token comment">// 可选参数，在对象中可不写</span>
<span class="token keyword">let</span> user2<span class="token operator">:</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">?</span><span class="token operator">:</span>nmber<span class="token punctuation">}</span>
user2 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">&#39;李四&#39;</span><span class="token punctuation">}</span>

<span class="token comment">// 在对象中，某些个属性固定，其他可以添加任意属性</span>
<span class="token keyword">let</span> user3<span class="token operator">:</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>protoName<span class="token punctuation">]</span><span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">}</span>

user3<span class="token operator">:</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">&#39;李四&#39;</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span>sex<span class="token operator">:</span><span class="token string">&#39;female&#39;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="函数的声明" tabindex="-1"><a class="header-anchor" href="#函数的声明"><span>函数的声明</span></a></h4><p>普通函数的声明</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">+</span>b
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token comment">// 指定了返回的是number类型的值 </span>
<span class="token comment">// 可选参数加问号</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> c<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">+</span>b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>箭头函数的声明</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token comment">// 先声明后赋值</span>
<span class="token keyword">let</span> <span class="token function-variable function">fun</span><span class="token operator">:</span><span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span>
<span class="token function-variable function">fun</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token operator">*</span>b

<span class="token comment">// 声明赋值一起</span>
<span class="token keyword">let</span> <span class="token function-variable function">fun</span><span class="token operator">:</span><span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function-variable function">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token operator">*</span>b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>回调函数会根据上下文推断参数是什么类型</p><h3 id="ts联合类型" tabindex="-1"><a class="header-anchor" href="#ts联合类型"><span>TS联合类型</span></a></h3><h4 id="使用-符号" tabindex="-1"><a class="header-anchor" href="#使用-符号"><span>使用“|”符号</span></a></h4><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token comment">// 表示变量可以是字符串、数字或布尔值</span>
<span class="token keyword">let</span> user<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>频繁使用场景：</p><p>数组和函数返回值当中</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">number</span><span class="token operator">|</span><span class="token builtin">string</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token builtin">number</span><span class="token operator">|</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">*</span>b
<span class="token punctuation">}</span>

<span class="token keyword">let</span> arr<span class="token operator">:</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token operator">|</span><span class="token builtin">number</span><span class="token operator">|</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span><span class="token number">1231</span><span class="token punctuation">,</span><span class="token keyword">undefined</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="" tabindex="-1"><a class="header-anchor" href="#"><span>“&amp;”</span></a></h4><p>表示同时满足，但是没有意义</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">let</span> arr<span class="token operator">:</span><span class="token builtin">string</span><span class="token operator">&amp;</span><span class="token builtin">number</span> <span class="token comment">// 没有意义，无法同时满足</span>
<span class="token comment">// 可用于的对象</span>
<span class="token keyword">let</span> obj<span class="token operator">:</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">}</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span>age<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">}</span>
obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字面量赋值" tabindex="-1"><a class="header-anchor" href="#字面量赋值"><span>字面量赋值</span></a></h4><p>类似常量，值不变</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">let</span> a<span class="token operator">:</span><span class="token number">5</span> 
<span class="token comment">// 值只能为5</span>
<span class="token keyword">let</span> str<span class="token operator">:</span><span class="token string">&#39;hello&#39;</span>
a <span class="token operator">=</span> <span class="token number">5</span>
str <span class="token operator">=</span> hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类型断言" tabindex="-1"><a class="header-anchor" href="#类型断言"><span>类型断言</span></a></h2><h3 id="as运算符" tabindex="-1"><a class="header-anchor" href="#as运算符"><span>as运算符</span></a></h3><p>TS的类型断言类似于其他语言的强制类型转换</p><h4 id="类型缩小" tabindex="-1"><a class="header-anchor" href="#类型缩小"><span>类型缩小</span></a></h4><p>类型缩小可以解决和类型断言相同的问题，断言用的多</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>n<span class="token operator">:</span><span class="token builtin">number</span><span class="token operator">|</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    n<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token comment">// 会报错，因为有可能会拿到number的参数</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类型缩小</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>n<span class="token operator">:</span><span class="token builtin">number</span><span class="token operator">|</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> len<span class="token operator">:</span><span class="token builtin">number</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> n <span class="token operator">==</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       len <span class="token operator">=</span> n<span class="token punctuation">.</span>leng
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token string">&#39;qwdqwwdqw&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="as运算符-类型断言" tabindex="-1"><a class="header-anchor" href="#as运算符-类型断言"><span>as运算符（类型断言）</span></a></h4><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>n<span class="token operator">:</span><span class="token builtin">number</span><span class="token operator">|</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> len<span class="token operator">:</span><span class="token builtin">number</span>
	len <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一种断言方式</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>n<span class="token operator">:</span><span class="token builtin">number</span><span class="token operator">|</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> len<span class="token operator">:</span><span class="token builtin">number</span>
	len <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">n).length
}
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="as-const-的应用" tabindex="-1"><a class="header-anchor" href="#as-const-的应用"><span>as const 的应用</span></a></h4><p><strong>可以将推断类型转为字面变量</strong></p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;hello! typescript&#39;</span> <span class="token keyword">as</span> <span class="token keyword">const</span> 
<span class="token comment">// 相当于</span>
<span class="token keyword">let</span> str<span class="token operator">:</span><span class="token string">&#39;hello! typescript&#39;</span> <span class="token operator">=</span> <span class="token string">&#39;hello! typescript&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>将数组变为只读的元组</strong></p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span> 
<span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>const</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">[&#39;hello&#39;, 12]  // 也可以这样写
console.log(arr[0])
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>将对象变为只读的</strong></p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
	name<span class="token operator">:</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
	age<span class="token operator">:</span><span class="token number">15</span>
<span class="token punctuation">}</span> <span class="token keyword">as</span> cosnt 
<span class="token comment">// 该对象无法被修改，只能读</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>用在解构赋值</strong></p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> str<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>
    <span class="token keyword">let</span> fun <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=&gt;</span> a<span class="token operator">*</span>b
   	<span class="token comment">// return [str,fun] as [string,number] // 在返回值时断言</span>
    <span class="token comment">// 也可使用as const</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>str fun<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> <span class="token punctuation">(</span>nstr<span class="token punctuation">,</span>nfun<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 不确定nstr和nfun的类型</span>

<span class="token comment">// 在调用的时候断言</span>
<span class="token keyword">let</span> <span class="token punctuation">(</span>nstr<span class="token punctuation">,</span> nfun<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span><span class="token punctuation">]</span>
<span class="token comment">// 在nfun调用时断言</span>
<span class="token punctuation">(</span>nfun <span class="token keyword">as</span> <span class="token builtin">Function</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="非空断言" tabindex="-1"><a class="header-anchor" href="#非空断言"><span>非空断言</span></a></h3><p>默认所有变量都可以赋值为 null 和 undefined，当ts配置文件设置变量不为空时，不能赋值</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">let</span> str<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 可以</span>
<span class="token comment">// 开启  &quot;strictNullChecks&quot;: true,  </span>
<span class="token keyword">let</span> str<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 报错</span>

<span class="token keyword">let</span> <span class="token keyword">as</span><span class="token operator">:</span><span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 可行的</span>
<span class="token comment">// 也可以开启联合声明</span>
<span class="token keyword">let</span> str<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token keyword">undefined</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="非空断言-与dom操作" tabindex="-1"><a class="header-anchor" href="#非空断言-与dom操作"><span>!(非空断言)与DOM操作</span></a></h4><p>ts默认带有DOM的库，每个HTML元素对应着相应的类型</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">let</span> div<span class="token operator">:</span>HTMLDivElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 会提示不能将div赋值为空，因为这个值不确定的情况下是可谓空的</span>
<span class="token keyword">let</span> div<span class="token operator">:</span>HTMLDivElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLDivElement <span class="token comment">// 类型断言</span>

<span class="token keyword">let</span> div<span class="token operator">:</span>HTMLDivElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token operator">!</span> <span class="token comment">// 非空断言</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ts进阶" tabindex="-1"><a class="header-anchor" href="#ts进阶"><span>TS进阶</span></a></h2><h3 id="函数类型" tabindex="-1"><a class="header-anchor" href="#函数类型"><span>函数类型</span></a></h3><h4 id="函数编程" tabindex="-1"><a class="header-anchor" href="#函数编程"><span>函数编程</span></a></h4><p>语法：</p><div class="language-tex line-numbers-mode" data-ext="tex" data-title="tex"><pre class="language-tex"><code>fun(形参：类型, 形参：类型): =&gt; 返回类型
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>声明函数的类型</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">let</span> <span class="token function-variable function">fun</span><span class="token operator">:</span><span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function-variable function">number</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">+</span>b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用别名关键字来声明函数</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">type</span> <span class="token class-name">myfun</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span>
<span class="token keyword">let</span> fun<span class="token operator">:</span><span class="token function-variable function">myfun</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在函数的使用地方都可以使用声明结构</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token comment">// 对象中使用</span>
<span class="token keyword">let</span> user<span class="token operator">:</span><span class="token punctuation">{</span>
    name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>
    <span class="token function-variable function">fun</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">void</span>
<span class="token punctuation">}</span>
user <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>
    <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="函数的参数" tabindex="-1"><a class="header-anchor" href="#函数的参数"><span>函数的参数</span></a></h4><p><strong>可选参数</strong>放后面</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">const</span> fun <span class="token operator">=</span> <span class="token function">funtion</span><span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>b<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">{</span>
	<span class="token keyword">return</span> a<span class="token operator">+</span>b
<span class="token punctuation">}</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// 可选类型可以传undefined 相当于 b:number | undefined </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>函数参数的默认值</strong></p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">const</span> fun <span class="token operator">=</span> <span class="token function">funtion</span><span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>c<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
	<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
	<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 1 2 3</span>
<span class="token comment">// 如果只传一个 那么后面的参数会使用默认值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>函数剩余参数</strong></p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="函数的重载" tabindex="-1"><a class="header-anchor" href="#函数的重载"><span>函数的重载</span></a></h4><p>什么是函数重载？</p><p><strong>重载</strong>：函数的方法名相同，函数参数的个数不同，或者参数类型不同，或者参数顺序不同都为函数重载</p><p>函数重载与返回值类型无关</p><p>用于参数不同，但是功能相同的方法，作用对函数参数有一个检测功能，函数调用时，对参数进行检查，只有传入的参数类型，个数，顺序与定义的重载函数参数相同，才能调用成功</p><p>定义</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span> b<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">string</span>
<span class="token comment">// 前面是对类型的限制</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">any</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token operator">+</span>b
<span class="token punctuation">}</span>

<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment">// 6</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span> <span class="token comment">// helloworld</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// 报错</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="面向对象" tabindex="-1"><a class="header-anchor" href="#面向对象"><span>面向对象</span></a></h3><h4 id="类的定义" tabindex="-1"><a class="header-anchor" href="#类的定义"><span>类的定义</span></a></h4><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token builtin">number</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    	<span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
    <span class="token punctuation">}</span>
    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="类的继承和方法覆盖" tabindex="-1"><a class="header-anchor" href="#类的继承和方法覆盖"><span>类的继承和方法覆盖</span></a></h4><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span><span class="token builtin">string</span>
  age<span class="token operator">:</span><span class="token builtin">number</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token builtin">number</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    	<span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
    <span class="token punctuation">}</span>
    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    school<span class="token operator">:</span><span class="token builtin">string</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> school<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>school <span class="token operator">=</span> school
    <span class="token punctuation">}</span>
    <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;在&#39;</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>school<span class="token operator">+</span><span class="token string">&#39;学习&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span> <span class="token punctuation">(</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span><span class="token string">&#39;bilibili&#39;</span><span class="token punctuation">)</span>
s1<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
s1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token builtin">number</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    	<span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
    <span class="token punctuation">}</span>
    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    school<span class="token operator">:</span><span class="token builtin">string</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> school<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>school <span class="token operator">=</span> school
    <span class="token punctuation">}</span>
    <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;在&#39;</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>school<span class="token operator">+</span><span class="token string">&#39;学习&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">&#39;bilibili&#39;</span><span class="token punctuation">)</span>
s1<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="访问修饰符" tabindex="-1"><a class="header-anchor" href="#访问修饰符"><span>访问修饰符</span></a></h4><p><code>public</code></p><p>默认修饰符，如果使用该修饰符修饰类的属性或方法，可以在从类的外部访问该属性方法</p><p><code>private</code></p><p>使用该修饰符修饰属性或方法，只能在类的内部访问该属性和方法</p><p><code>protected</code></p><p>使用该修饰符修饰属性或方法，只能在类的内部访问或子类的内部访问</p><p><code>readonly</code></p><p>只读属性，不能够重写属性值</p><h4 id="类的封装特性" tabindex="-1"><a class="header-anchor" href="#类的封装特性"><span>类的封装特性</span></a></h4><p>方法的封装</p><p>在一个功能齐全的类当中有很多方法，很多时候多个方法为一个主方法服务，单独拿出来调用没有意义，将多个方法使用private修饰，那么外部就无法调用，这就是对主方法的一个封装</p><p>存取器和读取器</p><p>set 和 get 修饰方法，类似vue中的数据代理</p><h4 id="静态static的应用" tabindex="-1"><a class="header-anchor" href="#静态static的应用"><span>静态static的应用</span></a></h4><p>static修饰的静态成员不在生成的实例对象中，而是在类中</p><p>只能通过类名调用</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
	stactic school<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;eduword&#39;</span>
	name<span class="token operator">:</span><span class="token builtin">string</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name 
    <span class="token punctuation">}</span>
	<span class="token keyword">static</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;$$$$$$&#39;</span><span class="token punctuation">)</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">&#39;$$$$$$&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 不能访问</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
Student<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在静态方法中不能访问非静态成员，只能访问静态成员</p><h4 id="抽象类和接口" tabindex="-1"><a class="header-anchor" href="#抽象类和接口"><span>抽象类和接口</span></a></h4><p><strong>抽象类</strong>：一个特殊的类，如果一个类里面有一个方法是抽象的，那么这个类就是一个抽象类。</p><p>抽象方法：没有方法体的方法</p><p>用 <code>abstract</code>修饰抽象类和抽象方法</p><p>抽象类不能实例化</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;edwork&#39;</span>
    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">12321</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
   	<span class="token keyword">abstract</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>抽象类的子类可以创建实例，但是前提子类没有抽象方法，所以子类要对父类的抽象方法进行重写。</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;edwork&#39;</span>
    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">12321</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
   	<span class="token keyword">abstract</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1111</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>抽象类的作用就是约束子类对方法的实现</p><p><strong>接口</strong>：特殊的抽象类</p><p>接口里的成员都是公有的，里面的方法都是抽象方法</p><p>接口可以被类实现，一个类只能继承另一个类，但是可以实现多个接口</p><p>使用interface声明接口</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">interface</span> <span class="token class-name">One</span> <span class="token punctuation">{</span>
	hello<span class="token operator">:</span><span class="token builtin">string</span>
    <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Tow</span> <span class="token punctuation">{</span>
    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span>
<span class="token punctuation">}</span>

<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;edwork&#39;</span>
    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">12321</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
   	<span class="token keyword">abstract</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1111</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 接口也可以继承,而且也可以继承多个接口</span>
<span class="token comment">//interface Three extends One {}</span>
<span class="token keyword">interface</span> <span class="token class-name">Three</span> <span class="token keyword">extends</span> <span class="token class-name">One</span><span class="token punctuation">,</span>Tow <span class="token punctuation">{</span>
    <span class="token function">far</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span>
<span class="token punctuation">}</span>
    
<span class="token comment">// 可以使用抽象类实现接口的部分功能</span>
<span class="token comment">// abstract class P extends One {}</span>
    
<span class="token comment">//用类去实现一个或多个接口</span>
<span class="token comment">/* class Four implements Three {
    hello:string = &#39;edword&#39;
    fun(){}
    foo(){}
    far(){}
}
*/</span>
<span class="token comment">// 一个类可以继承的同时，实现一个或多个接口</span>
<span class="token keyword">class</span> <span class="token class-name">Four</span> <span class="token keyword">extends</span> <span class="token class-name">Demo</span> <span class="token keyword">implements</span> <span class="token class-name">Three</span> <span class="token punctuation">{</span>
     hello<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;edword&#39;</span>
     <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
     <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
     <span class="token function">far</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Four</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多态性" tabindex="-1"><a class="header-anchor" href="#多态性"><span>多态性</span></a></h3><p>多态：由继承而产生了相关的不同的类，对同一个方法有不同的响应</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">USB</span></span> <span class="token punctuation">{</span>
    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span>
    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span>
    <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span>u<span class="token operator">:</span><span class="token constant">USB</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    u<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    u<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    u<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Shubiao</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token constant">USB</span></span> <span class="token punctuation">{</span>
    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;鼠标开启&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;运行&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;运行结束&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">demo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Shubiao</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多态一定具有继承关系，将子类对象赋给父类的引用</p><h4 id="接口在ts中的灵活运用" tabindex="-1"><a class="header-anchor" href="#接口在ts中的灵活运用"><span>接口在TS中的灵活运用</span></a></h4><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;eduwork&#39;</span>
    age<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> p<span class="token operator">:</span>Person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> p1<span class="token operator">:</span>Person <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">}</span>

<span class="token comment">// 使用字面量创建对象</span>
<span class="token keyword">type</span> <span class="token class-name">MyObj</span> <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">}</span>
<span class="token keyword">const</span> o3<span class="token operator">:</span>MyObj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">&#39;ws&#39;</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">}</span>

<span class="token comment">// 使用接口来创建对象</span>
<span class="token keyword">interface</span> <span class="token class-name">One</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> o4<span class="token operator">:</span>One <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>别名声明的对象不能重名，接口可以（相当于默认继承）</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A1</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">}</span>
<span class="token comment">// type A1 = {age:number} 错误</span>

<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A2</span></span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span><span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A2</span></span> <span class="token punctuation">{</span>
    age<span class="token operator">:</span><span class="token builtin">number</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> o1<span class="token operator">:</span><span class="token constant">A2</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span><span class="token number">10</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接口实现任意属性</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">L1</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>index<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> list<span class="token operator">:</span><span class="token constant">L1</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token number">1</span><span class="token operator">:</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">,</span>
    <span class="token number">2</span><span class="token operator">:</span><span class="token string">&#39;two&#39;</span><span class="token punctuation">,</span>
    <span class="token number">3</span><span class="token operator">:</span><span class="token string">&#39;three&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">L2</span></span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>key<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token builtin">number</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> list2<span class="token operator">:</span><span class="token constant">L2</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;one&#39;</span><span class="token operator">:</span><span class="token number">111</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;two&#39;</span><span class="token operator">:</span><span class="token number">222</span><span class="token punctuation">,</span>
    <span class="token string">&#39;three&#39;</span><span class="token punctuation">,</span><span class="token number">333</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型"><span>泛型</span></a></h3><p><strong>什么是泛型？</strong></p><p>泛型指在定义函数、接口或类时，不预先指定具体的类型，而是在使用时再指定类型的一种特性</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">fun</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arg1<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">,</span> arg2<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">,</span> arg3<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arg1
<span class="token punctuation">}</span>

<span class="token comment">// 调用时再指定类型</span>
<span class="token generic-function"><span class="token function">fun</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span> 
<span class="token generic-function"><span class="token function">fun</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span>
<span class="token generic-function"><span class="token function">fun</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">{</span>length<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>length<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>length<span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>length<span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token comment">// 可以自动推断类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义多个泛型</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">fun</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span><span class="token constant">E</span><span class="token punctuation">,</span><span class="token constant">G</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arg1<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">,</span> arg2<span class="token operator">:</span><span class="token constant">E</span><span class="token punctuation">,</span> arg3<span class="token operator">:</span><span class="token constant">G</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arg1
<span class="token punctuation">}</span>
<span class="token generic-function"><span class="token function">fun</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">,</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>泛型参数的默认类型</strong></p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">fun</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">number</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arg
<span class="token punctuation">}</span>
<span class="token comment">// 调用时如果没指定类型，那么参数默认为默认参数类型</span>
<span class="token generic-function"><span class="token function">fun</span><span class="token generic class-name"><span class="token operator">&lt;</span>tring<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// arg = a</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment">// arg = 10 </span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>泛型的约束</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">interface</span> <span class="token class-name">One</span> <span class="token punctuation">{</span>
  length<span class="token operator">:</span><span class="token builtin">number</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">fun</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> One<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>arg<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> arg<span class="token punctuation">.</span>length
<span class="token punctuation">}</span>

<span class="token function">fun</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 3</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 3 </span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span>length<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>泛型接口</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">interface</span> <span class="token class-name">IPerson<span class="token operator">&lt;</span><span class="token constant">T1</span><span class="token punctuation">,</span><span class="token constant">T2</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>  <span class="token comment">// 也可以设默认值</span>
	name<span class="token operator">:</span><span class="token constant">T1</span><span class="token punctuation">,</span>
	sex<span class="token operator">:</span><span class="token constant">T2</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> p<span class="token operator">:</span>IPerson<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span><span class="token string">&#39;eduwork&#39;</span><span class="token punctuation">,</span>
    sex<span class="token operator">:</span><span class="token string">&#39;male&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>泛型类</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">class</span> <span class="token class-name">Person<span class="token operator">&lt;</span><span class="token constant">T1</span><span class="token punctuation">,</span><span class="token constant">T2</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span><span class="token constant">T1</span><span class="token punctuation">;</span>
    age<span class="token operator">:</span><span class="token constant">T2</span><span class="token punctuation">;</span>
    sex<span class="token operator">:</span><span class="token constant">T1</span><span class="token punctuation">;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token constant">T1</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token constant">T2</span><span class="token punctuation">,</span> sex<span class="token operator">:</span><span class="token constant">T1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age
        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;eduwork&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">&#39;male&#39;</span><span class="token punctuation">)</span> <span class="token comment">//自动判断类型</span>
<span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&#39;monk&#39;</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&#39;male&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 自定义赋值类型 </span>
<span class="token keyword">const</span> p2<span class="token operator">:</span>Person<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;ask&#39;</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">&#39;male&#39;</span><span class="token punctuation">)</span> <span class="token comment">//也可以用类来约束这个对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在开发中使用ts" tabindex="-1"><a class="header-anchor" href="#在开发中使用ts"><span>在开发中使用TS</span></a></h2><h3 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建"><span>环境搭建</span></a></h3><p>首先初始化项目</p><p>npm init -y</p><p>安装webpack</p><p>npm i webpack webpack-cli webpack-dev-server -D</p><p>在根目录下创建webpack配置文件 <code>webpack.config.js</code></p><figure><img src="https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/image-20230316232715258.png" alt="image-20230316232715258" tabindex="0" loading="lazy"><figcaption>image-20230316232715258</figcaption></figure><p>下一步安装<code>ts-loader</code></p><p>npm i ts-loader</p><p>配置如上图</p><p>问题：如果执行tsc init --init 进行ts配置文件的初始化，会显示有个语法报错</p><p>打开配置文件</p><figure><img src="https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/image-20230316233145014.png" alt="image-20230316233145014" tabindex="0" loading="lazy"><figcaption>image-20230316233145014</figcaption></figure><p>在files选项设置为ts.ts，然后在同目录下创建一个ts.ts文件即可</p><figure><img src="https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/image-20230316233400077.png" alt="image-20230316233400077" tabindex="0" loading="lazy"><figcaption>image-20230316233400077</figcaption></figure><h3 id="ts中的命名空间" tabindex="-1"><a class="header-anchor" href="#ts中的命名空间"><span>TS中的命名空间</span></a></h3><p>防止命名冲突，可以使用命名空间</p><figure><img src="https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/image-20230317000419373.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在命名空间内命名的函数可以直接调用，如果想要在命名空间外使用需要导出，再通过<code>空间名.</code> 的形式使用</p><figure><img src="https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/image-20230317000313705.png" alt="image-20230317000313705" tabindex="0" loading="lazy"><figcaption>image-20230317000313705</figcaption></figure><p>命名空间内也可以继续嵌套命名空间</p><figure><img src="https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/image-20230317001435121.png" alt="image-20230317001435121" tabindex="0" loading="lazy"><figcaption>image-20230317001435121</figcaption></figure><h3 id="在ts中使用第三方的javascript库" tabindex="-1"><a class="header-anchor" href="#在ts中使用第三方的javascript库"><span>在TS中使用第三方的JavaScript库</span></a></h3><p>在ts中使用第三方的javascript库，例如axios，需要在包中加入ts文件描述（以.d.ts结尾的文件名，一般第三方库提供有），如果没有描述文件需要自己定义才可使用</p><figure><img src="https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/image-20230317153616162.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>关于描述文件不起效果的原因</p><figure><img src="https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/image-20230317153845979.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里看到即使我们在描述文件当中声明了lodash 模块，但是还是会报错</p><p>首先我们要搞懂 描述文件<code>env.d.ts</code>生效的原因是什么，那就是在<code>tsconfig.json</code>文件中声明了:</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code> <span class="token property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/**/*.ts&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;src/**/*.d.ts&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;src/**/*.tsx&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这行json代码指定了需要编译处理的文件列表，因此在本地创建 *.d.ts文件时，需要注意文件的存放路径是否符合include声明的要求，否则是不会被编译处理的。</p><figure><img src="https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/image-20230317154020109.png" alt="image-20230317154020109" tabindex="0" loading="lazy"><figcaption>image-20230317154020109</figcaption></figure><p>报错解决了</p><h3 id="vue3与ts的结合开发" tabindex="-1"><a class="header-anchor" href="#vue3与ts的结合开发"><span>VUE3与TS的结合开发</span></a></h3><p>在vue中使用TS，在项目创建初需要先选择好vue的第三发库（vuex，vueRouter）脚手架安装的可以直接使用，不需要去自定义泛型</p><p>js开发与ts开发的文件对比</p><p>ts版</p><figure><img src="https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/image-20230317181618931.png" alt="image-20230317181618931" tabindex="0" loading="lazy"><figcaption>image-20230317181618931</figcaption></figure><figure><img src="https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/image-20230317181803535.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这些都是定义好的</p><p>js版</p><figure><img src="https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/image-20230317181849410.png" alt="image-20230317181849410" tabindex="0" loading="lazy"><figcaption>image-20230317181849410</figcaption></figure><p><strong>定义vue3支持TS的组件</strong></p><p>关于eslint 语法检测报错问题</p><p><code>Parsing error: Unexpected token</code></p><figure><img src="https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/image-20230317184908474.png" alt="image-20230317184908474" tabindex="0" loading="lazy"><figcaption>image-20230317184908474</figcaption></figure><p>在eslint配置文件中如下配置</p><figure><img src="https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/image-20230317184839217.png" alt="image-20230317184839217" tabindex="0" loading="lazy"><figcaption>image-20230317184839217</figcaption></figure>`,238),o=[p];function c(l,i){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","TypeScript.html.vue"]]),d=JSON.parse('{"path":"/base/JavaScript/TypeScript.html","title":"TypeScript","lang":"zh-CN","frontmatter":{"description":"TypeScript TS概述 TS是JavaScript的一个超集 TS是在JS的基础上添加了静态类型定义结构的强类型语言。 TypeScript通过TypeScript编译器或Babel转译为JavaScript代码，可运行在任何浏览器，任何操作系统。 TS的环境搭建与配置文件 安装TS环境 npm install -g typescript TS...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/Blog/base/JavaScript/TypeScript.html"}],["meta",{"property":"og:site_name","content":"取名花光钱"}],["meta",{"property":"og:title","content":"TypeScript"}],["meta",{"property":"og:description","content":"TypeScript TS概述 TS是JavaScript的一个超集 TS是在JS的基础上添加了静态类型定义结构的强类型语言。 TypeScript通过TypeScript编译器或Babel转译为JavaScript代码，可运行在任何浏览器，任何操作系统。 TS的环境搭建与配置文件 安装TS环境 npm install -g typescript TS..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/image-20230316232715258.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"取名花光钱"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TypeScript\\",\\"image\\":[\\"https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/image-20230316232715258.png\\",\\"https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/image-20230316233145014.png\\",\\"https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/image-20230316233400077.png\\",\\"https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/image-20230317000419373.png\\",\\"https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/image-20230317000313705.png\\",\\"https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/image-20230317001435121.png\\",\\"https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/image-20230317153616162.png\\",\\"https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/image-20230317153845979.png\\",\\"https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/image-20230317154020109.png\\",\\"https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/image-20230317181618931.png\\",\\"https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/image-20230317181803535.png\\",\\"https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/image-20230317181849410.png\\",\\"https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/image-20230317184908474.png\\",\\"https://raw.githubusercontent.com/molimaMCc/Image/main/imgs/image-20230317184839217.png\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"取名花光钱\\",\\"url\\":\\"https://molimamcc.github.io/Blog/\\"}]}"]]},"headers":[{"level":2,"title":"TS概述","slug":"ts概述","link":"#ts概述","children":[]},{"level":2,"title":"TS的环境搭建与配置文件","slug":"ts的环境搭建与配置文件","link":"#ts的环境搭建与配置文件","children":[]},{"level":2,"title":"TS的数据类型","slug":"ts的数据类型","link":"#ts的数据类型","children":[{"level":3,"title":"TS的基本数据类型","slug":"ts的基本数据类型","link":"#ts的基本数据类型","children":[]},{"level":3,"title":"TS特殊数据类型","slug":"ts特殊数据类型","link":"#ts特殊数据类型","children":[]},{"level":3,"title":"TS联合类型","slug":"ts联合类型","link":"#ts联合类型","children":[]}]},{"level":2,"title":"类型断言","slug":"类型断言","link":"#类型断言","children":[{"level":3,"title":"as运算符","slug":"as运算符","link":"#as运算符","children":[]},{"level":3,"title":"非空断言","slug":"非空断言","link":"#非空断言","children":[]}]},{"level":2,"title":"TS进阶","slug":"ts进阶","link":"#ts进阶","children":[{"level":3,"title":"函数类型","slug":"函数类型","link":"#函数类型","children":[]},{"level":3,"title":"面向对象","slug":"面向对象","link":"#面向对象","children":[]},{"level":3,"title":"多态性","slug":"多态性","link":"#多态性","children":[]},{"level":3,"title":"泛型","slug":"泛型","link":"#泛型","children":[]}]},{"level":2,"title":"在开发中使用TS","slug":"在开发中使用ts","link":"#在开发中使用ts","children":[{"level":3,"title":"环境搭建","slug":"环境搭建","link":"#环境搭建","children":[]},{"level":3,"title":"TS中的命名空间","slug":"ts中的命名空间","link":"#ts中的命名空间","children":[]},{"level":3,"title":"在TS中使用第三方的JavaScript库","slug":"在ts中使用第三方的javascript库","link":"#在ts中使用第三方的javascript库","children":[]},{"level":3,"title":"VUE3与TS的结合开发","slug":"vue3与ts的结合开发","link":"#vue3与ts的结合开发","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":13.69,"words":4107},"filePathRelative":"base/JavaScript/TypeScript.md","excerpt":"\\n<h2>TS概述</h2>\\n<h4>TS是JavaScript的一个超集</h4>\\n<p>TS是在JS的基础上添加了静态类型定义结构的强类型语言。</p>\\n<p>TypeScript通过TypeScript编译器或Babel转译为JavaScript代码，可运行在任何浏览器，任何操作系统。</p>\\n<h2>TS的环境搭建与配置文件</h2>\\n<h4>安装TS环境</h4>\\n<p><code>npm install -g typescript</code></p>\\n<h2>TS的数据类型</h2>\\n<h3>TS的基本数据类型</h3>\\n<h4>数字类型（number）</h4>\\n<p>TypeScript和JavaScript一样，不区分整数，浮点和双精度（int，float，double）</p>","autoDesc":true}');export{k as comp,d as data};
